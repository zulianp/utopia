
macro (set_utopia_compiler_features target_)

if(ENABLE_CXX14_FEATURES)
	if(ENABLE_MOOSE_ENV_MODE)
		# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
		target_compile_options(${target_} PUBLIC -std=c++14)
	else()
		target_compile_features(${target_} PUBLIC cxx_std_14)
	endif()
else()
	if(ENABLE_MOOSE_ENV_MODE)
		# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
		target_compile_options(${target_} PUBLIC -std=c++11)
	else()
		target_compile_features(${target_} PUBLIC cxx_std_11)
	endif()
endif()
# target_compile_features(${target_} PUBLIC cxx_constexpr)
# target_compile_features(${target_} PUBLIC cxx_aggregate_default_initializers)
# target_compile_features(${target_} PUBLIC cxx_alias_templates)
# # target_compile_features(${target_} PUBLIC cxx_alignas)
# # target_compile_features(${target_} PUBLIC cxx_alignof)
# # target_compile_features(${target_} PUBLIC cxx_attributes)
# # target_compile_features(${target_} PUBLIC cxx_attribute_deprecated)
# target_compile_features(${target_} PUBLIC cxx_auto_type)
# # target_compile_features(${target_} PUBLIC cxx_binary_literals)
# target_compile_features(${target_} PUBLIC cxx_constexpr)
# target_compile_features(${target_} PUBLIC cxx_contextual_conversions)
# # target_compile_features(${target_} PUBLIC cxx_decltype_incomplete_return_types)
# target_compile_features(${target_} PUBLIC cxx_decltype)
# target_compile_features(${target_} PUBLIC cxx_decltype_auto)
# target_compile_features(${target_} PUBLIC cxx_default_function_template_args)
# target_compile_features(${target_} PUBLIC cxx_defaulted_functions)
# target_compile_features(${target_} PUBLIC cxx_defaulted_move_initializers)
# target_compile_features(${target_} PUBLIC cxx_delegating_constructors)
# target_compile_features(${target_} PUBLIC cxx_deleted_functions)
# target_compile_features(${target_} PUBLIC cxx_digit_separators)
# # target_compile_features(${target_} PUBLIC cxx_enum_forward_declarations)
# target_compile_features(${target_} PUBLIC cxx_explicit_conversions)
# # target_compile_features(${target_} PUBLIC cxx_extended_friend_declarations)
# target_compile_features(${target_} PUBLIC cxx_extern_templates)
# # target_compile_features(${target_} PUBLIC cxx_final)
# target_compile_features(${target_} PUBLIC cxx_func_identifier)
# # target_compile_features(${target_} PUBLIC cxx_generalized_initializers)
# # target_compile_features(${target_} PUBLIC cxx_generic_lambdas)
# target_compile_features(${target_} PUBLIC cxx_inheriting_constructors)
# # target_compile_features(${target_} PUBLIC cxx_inline_namespaces)
# target_compile_features(${target_} PUBLIC cxx_lambdas)
# target_compile_features(${target_} PUBLIC cxx_lambda_init_captures)
# target_compile_features(${target_} PUBLIC cxx_local_type_template_args)
# # target_compile_features(${target_} PUBLIC cxx_long_long_type)
# target_compile_features(${target_} PUBLIC cxx_noexcept)
# target_compile_features(${target_} PUBLIC cxx_nonstatic_member_init)
# target_compile_features(${target_} PUBLIC cxx_nullptr)
# target_compile_features(${target_} PUBLIC cxx_override)
# target_compile_features(${target_} PUBLIC cxx_range_for)
# target_compile_features(${target_} PUBLIC cxx_raw_string_literals)
# # target_compile_features(${target_} PUBLIC cxx_reference_qualified_functions)
# # target_compile_features(${target_} PUBLIC cxx_relaxed_constexpr)
# # target_compile_features(${target_} PUBLIC cxx_return_type_deduction)
# # target_compile_features(${target_} PUBLIC cxx_right_angle_brackets)
# target_compile_features(${target_} PUBLIC cxx_rvalue_references)
# target_compile_features(${target_} PUBLIC cxx_sizeof_member)
# target_compile_features(${target_} PUBLIC cxx_static_assert)
# target_compile_features(${target_} PUBLIC cxx_strong_enums)
# # target_compile_features(${target_} PUBLIC cxx_thread_local)
# target_compile_features(${target_} PUBLIC cxx_trailing_return_types)
# # target_compile_features(${target_} PUBLIC cxx_unicode_literals)
# target_compile_features(${target_} PUBLIC cxx_uniform_initialization)
# # target_compile_features(${target_} PUBLIC cxx_unrestricted_unions)
# # target_compile_features(${target_} PUBLIC cxx_user_literals)
# target_compile_features(${target_} PUBLIC cxx_variable_templates)
# # target_compile_features(${target_} PUBLIC cxx_variadic_macros)
# target_compile_features(${target_} PUBLIC cxx_variadic_templates)
# target_compile_features(${target_} PUBLIC cxx_template_template_parameters)
endmacro (set_utopia_compiler_features)
