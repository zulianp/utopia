#include "utopia_petsc_KSPWrapper.hpp"
#include "utopia_petsc_Types.hpp"

namespace utopia {
	//TODO check what solvers are available in petsc based on the compilation and version

	KSPTypes::KSPTypes():
	ksp_({
		KSPRICHARDSON,
		KSPCHEBYSHEV,
		KSPCG,
		KSPGROPPCG,
		KSPPIPECG,
		KSPPIPECGRR,
#if UTOPIA_PETSC_VERSION_GREATER_EQUAL_THAN(3,9,0)
		KSPPIPELCG,
#endif
		KSPCGNE,
#if UTOPIA_PETSC_VERSION_GREATER_EQUAL_THAN(3,8,0)
		KSPCGNASH,
		KSPCGSTCG,
#endif
		KSPCGGLTR,
		KSPFCG,
		KSPPIPEFCG,
		KSPGMRES,
		KSPPIPEFGMRES,
		KSPFGMRES,
		KSPLGMRES,
		KSPDGMRES,
		KSPPGMRES,
		KSPTCQMR,
		KSPBCGS,
		KSPIBCGS,
		KSPFBCGS,
		KSPFBCGSR,
		KSPBCGSL,
		KSPPIPEBCGS,
		KSPCGS,
		KSPTFQMR,
		KSPCR,
		KSPPIPECR,
		KSPLSQR,
		KSPPREONLY,
		KSPQCG,
		KSPBICG,
		KSPMINRES,
		KSPSYMMLQ,
		KSPLCD,
		KSPPYTHON,
		KSPGCR,
		KSPPIPEGCR,
		KSPTSIRM,
		KSPCGLS,
		KSPFETIDP
	}),
	pc_({
		PCJACOBI,
		PCSOR,
		PCLU,
		PCSHELL,
		PCBJACOBI,
		PCMG,
		PCEISENSTAT,
		PCILU,
		PCICC,
		PCASM,
		PCGASM,
		PCKSP,
		PCCOMPOSITE,
		PCREDUNDANT,
		PCSPAI,
		PCNN,
		PCCHOLESKY,
		PCPBJACOBI,
		PCMAT,
		PCHYPRE,
		PCPARMS,
		PCFIELDSPLIT,
		PCTFS,
		PCML,
		PCGALERKIN,
		PCEXOTIC,
		PCCP,
		PCBFBT,
		PCLSC,
		PCPYTHON,
		PCPFMG,
		PCSYSPFMG,
		PCREDISTRIBUTE,
		PCSVD,
		PCGAMG,
		PCCHOWILUVIENNACL,
		PCROWSCALINGVIENNACL,
		PCSAVIENNACL,
		PCBDDC,
		PCKACZMARZ,
		PCTELESCOPE,
		PCNONE
	}), 
	package_({" ", "petsc", "mumps", "superlu", "superlu_dist" })
	{}

	template class KSPWrapper<DSMatrixd, DVectord>;
}
