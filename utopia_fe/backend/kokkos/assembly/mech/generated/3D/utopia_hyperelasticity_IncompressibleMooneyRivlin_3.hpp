#ifndef UTOPIA_TPL_HYPERELASTICITY_IncompressibleMooneyRivlin_3_IMPL_hpp
#define UTOPIA_TPL_HYPERELASTICITY_IncompressibleMooneyRivlin_3_IMPL_hpp

#include "utopia_Input.hpp"

#include "utopia_hyperelasticity_IncompressibleMooneyRivlin.hpp"

namespace utopia {
    namespace kernels {

        /**
         * Specialization of IncompressibleMooneyRivlin for dimension 3
         */
        template <typename T>
        class IncompressibleMooneyRivlin<T, 3> {
        public:
            static constexpr int Dim = 3;

            UTOPIA_FUNCTION static constexpr const char *class_name() { return "IncompressibleMooneyRivlin_3"; }

            class Params : public Configurable {
            public:
                void read(Input &in) override {
                    in.get("C1", C1);
                    in.get("C2", C2);
                    in.get("K", K);
                }

                T C1{0.083};
                T C2{0.083};
                T K{166.67};
            };

            IncompressibleMooneyRivlin(const Params &params) {
                C1 = params.C1;
                C2 = params.C2;
                K = params.K;
            }

            UTOPIA_FUNCTION void hessian(const T *UTOPIA_RESTRICT f,
                                         const T *grad_test,
                                         const T *grad_trial,
                                         const T dx,
                                         T *UTOPIA_RESTRICT bf) const {
                using namespace utopia::device;
                // Automatically generated
                T x0 = f[4] * f[8];
                T x1 = 2 * x0;
                T x2 = f[5] * f[7];
                T x3 = -2 * x2;
                T x4 = x1 + x3;
                T x5 = (1.0 / 2.0) * K;
                T x6 = x5 * (x0 - x2);
                T x7 = f[5] * f[6];
                T x8 = f[3] * f[7];
                T x9 = f[0] * x2;
                T x10 = f[3] * f[8];
                T x11 = f[1] * x10;
                T x12 = f[4] * f[6];
                T x13 = f[2] * x12;
                T x14 = f[0] * x0 + f[1] * x7 + f[2] * x8 - x11 - x13 - x9;
                T x15 = 2 / pow(x14, 2.0 / 3.0);
                T x16 = pow(x14, -5.0 / 3.0);
                T x17 = (2.0 / 3.0) * f[5] * f[7] - 2.0 / 3.0 * x0;
                T x18 = x16 * x17;
                T x19 = pow(f[0], 2);
                T x20 = pow(f[1], 2);
                T x21 = pow(f[2], 2);
                T x22 = x19 + x20 + x21;
                T x23 = pow(f[3], 2);
                T x24 = pow(f[4], 2);
                T x25 = pow(f[5], 2);
                T x26 = x23 + x24 + x25;
                T x27 = pow(f[6], 2);
                T x28 = pow(f[7], 2);
                T x29 = pow(f[8], 2);
                T x30 = x27 + x28 + x29;
                T x31 = x22 + x26 + x30;
                T x32 = x31 / pow(x14, 8.0 / 3.0);
                T x33 = x32 * ((5.0 / 3.0) * f[5] * f[7] - 5.0 / 3.0 * x0);
                T x34 = 2 * x25;
                T x35 = 2 * x29;
                T x36 = x34 + x35;
                T x37 = 2 * x24;
                T x38 = 2 * x28;
                T x39 = x37 + x38;
                T x40 = pow(x14, -4.0 / 3.0);
                T x41 = 2 * f[0];
                T x42 = f[0] * f[3];
                T x43 = f[1] * f[4];
                T x44 = f[2] * f[5];
                T x45 = x42 + x43 + x44;
                T x46 = 2 * f[3];
                T x47 = f[0] * f[6];
                T x48 = f[1] * f[7];
                T x49 = f[2] * f[8];
                T x50 = x47 + x48 + x49;
                T x51 = 2 * f[6];
                T x52 = 2 * f[0] * x31 - x22 * x41 - x45 * x46 - x50 * x51;
                T x53 = pow(x14, -7.0 / 3.0);
                T x54 = (4.0 / 3.0) * f[5] * f[7] - 4.0 / 3.0 * x0;
                T x55 = x53 * x54;
                T x56 = f[3] * f[6];
                T x57 = f[4] * f[7];
                T x58 = f[5] * f[8];
                T x59 = x56 + x57 + x58;
                T x60 = -1.0 / 2.0 * pow(x22, 2) - 1.0 / 2.0 * pow(x26, 2) - 1.0 / 2.0 * pow(x30, 2) +
                        (1.0 / 2.0) * pow(x31, 2) - pow(x45, 2) - pow(x50, 2) - pow(x59, 2);
                T x61 = x60 / pow(x14, 10.0 / 3.0);
                T x62 = x61 * ((7.0 / 3.0) * f[5] * f[7] - 7.0 / 3.0 * x0);
                T x63 = 2 * x10;
                T x64 = -2 * x7;
                T x65 = -x63 - x64;
                T x66 = (2.0 / 3.0) * x10 - 2.0 / 3.0 * x7;
                T x67 = x16 * x41;
                T x68 = 2 * f[1];
                T x69 = x18 * x68 + x66 * x67;
                T x70 = (4.0 / 3.0) * x10 - 4.0 / 3.0 * x7;
                T x71 = f[4] * x46;
                T x72 = f[7] * x51;
                T x73 = 2 * x45;
                T x74 = 2 * x50;
                T x75 = 2 * f[1] * x31 - f[4] * x73 - f[7] * x74 - x22 * x68;
                T x76 = x52 * x53;
                T x77 = x40 * (-x71 - x72) + x55 * x75 + x70 * x76;
                T x78 = 2 * x8;
                T x79 = -2 * x12;
                T x80 = x78 + x79;
                T x81 = (2.0 / 3.0) * f[4] * f[6] - 2.0 / 3.0 * x8;
                T x82 = 2 * f[2];
                T x83 = x18 * x82 + x67 * x81;
                T x84 = (4.0 / 3.0) * f[4] * f[6] - 4.0 / 3.0 * x8;
                T x85 = f[5] * x46;
                T x86 = f[8] * x51;
                T x87 = 2 * f[2] * x31 - f[5] * x73 - f[8] * x74 - x22 * x82;
                T x88 = x40 * (-x85 - x86) + x55 * x87 + x76 * x84;
                T x89 = x5 * (f[5] * f[6] - x10);
                T x90 = x16 * x66;
                T x91 = x32 * ((5.0 / 3.0) * x10 - 5.0 / 3.0 * x7);
                T x92 = 2 * x23;
                T x93 = 2 * x27;
                T x94 = x92 + x93;
                T x95 = x53 * x75;
                T x96 = x61 * ((7.0 / 3.0) * x10 - 7.0 / 3.0 * x7);
                T x97 = x16 * x81;
                T x98 = x68 * x97 + x82 * x90;
                T x99 = 2 * f[4];
                T x100 = f[5] * x99;
                T x101 = 2 * f[7];
                T x102 = f[8] * x101;
                T x103 = x53 * x70;
                T x104 = x103 * x87 + x40 * (-x100 - x102) + x84 * x95;
                T x105 = x5 * (-x12 + x8);
                T x106 = x32 * ((5.0 / 3.0) * f[4] * f[6] - 5.0 / 3.0 * x8);
                T x107 = x53 * x87;
                T x108 = x61 * ((7.0 / 3.0) * f[4] * f[6] - 7.0 / 3.0 * x8);
                T x109 = f[1] * f[8];
                T x110 = 2 * x109;
                T x111 = f[2] * f[7];
                T x112 = -2 * x111;
                T x113 = -x110 - x112;
                T x114 = (2.0 / 3.0) * x109 - 2.0 / 3.0 * x111;
                T x115 = x114 * x67 + x18 * x46;
                T x116 = (4.0 / 3.0) * x109 - 4.0 / 3.0 * x111;
                T x117 = 2 * x43;
                T x118 = 2 * x44;
                T x119 = 2 * f[3] * x31 - x26 * x46 - x41 * x45 - x51 * x59;
                T x120 = x116 * x76 + x119 * x55 + x40 * (-x117 - x118);
                T x121 = f[0] * f[8];
                T x122 = 2 * x121;
                T x123 = f[2] * f[6];
                T x124 = -2 * x123;
                T x125 = x122 + x124;
                T x126 = K * (f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x11 - x13 - x9 - 1);
                T x127 = f[8] * x126;
                T x128 = (2.0 / 3.0) * f[2] * f[6] - 2.0 / 3.0 * x121;
                T x129 = f[8] * x16;
                T x130 = (2.0 / 3.0) * x31;
                T x131 = x129 * x130;
                T x132 = x128 * x67 - x131 + x18 * x99;
                T x133 = (4.0 / 3.0) * f[2] * f[6] - 4.0 / 3.0 * x121;
                T x134 = f[0] * f[4];
                T x135 = f[1] * f[3];
                T x136 = -2 * x135;
                T x137 = 2 * f[4] * x31 - x101 * x59 - x26 * x99 - x45 * x68;
                T x138 = (4.0 / 3.0) * x53 * x60;
                T x139 = f[8] * x138;
                T x140 = x133 * x76 + x137 * x55 - x139 + x40 * (4 * x134 + x136);
                T x141 = f[0] * f[7];
                T x142 = 2 * x141;
                T x143 = f[1] * f[6];
                T x144 = -2 * x143;
                T x145 = -x142 - x144;
                T x146 = f[7] * x126;
                T x147 = -x146;
                T x148 = (2.0 / 3.0) * x141 - 2.0 / 3.0 * x143;
                T x149 = 2 * f[5];
                T x150 = x130 * x16;
                T x151 = f[7] * x150;
                T x152 = x148 * x67 + x149 * x18 + x151;
                T x153 = (4.0 / 3.0) * x141 - 4.0 / 3.0 * x143;
                T x154 = f[0] * f[5];
                T x155 = f[2] * f[3];
                T x156 = -2 * x155;
                T x157 = 2 * f[8];
                T x158 = -f[2] * x73 + 2 * f[5] * x31 - x149 * x26 - x157 * x59;
                T x159 = f[7] * x138;
                T x160 = x153 * x76 + x158 * x55 + x159 + x40 * (4 * x154 + x156);
                T x161 = x16 * x68;
                T x162 = x128 * x161 + x90 * x99;
                T x163 = 2 * x42;
                T x164 = x103 * x137 + x133 * x95 + x40 * (-x118 - x163);
                T x165 = f[6] * x126;
                T x166 = f[6] * x150;
                T x167 = x148 * x161 + x149 * x90 - x166;
                T x168 = f[1] * f[5];
                T x169 = f[2] * f[4];
                T x170 = -2 * x169;
                T x171 = f[6] * x138;
                T x172 = x103 * x158 + x153 * x95 - x171 + x40 * (4 * x168 + x170);
                T x173 = -x127;
                T x174 = x114 * x161 + x131 + x46 * x90;
                T x175 = 2 * x134;
                T x176 = x103 * x119 + x116 * x95 + x139 + x40 * (4 * f[1] * f[3] - x175);
                T x177 = x16 * x82;
                T x178 = x148 * x177 + x149 * x97;
                T x179 = x53 * x84;
                T x180 = x107 * x153 + x158 * x179 + x40 * (-x117 - x163);
                T x181 = x114 * x177 - x151 + x46 * x97;
                T x182 = 2 * x154;
                T x183 = x107 * x116 + x119 * x179 - x159 + x40 * (4 * f[2] * f[3] - x182);
                T x184 = -x165;
                T x185 = x128 * x177 + x166 + x97 * x99;
                T x186 = 2 * x168;
                T x187 = x107 * x133 + x137 * x179 + x171 + x40 * (4 * f[2] * f[4] - x186);
                T x188 = x170 + x186;
                T x189 = (2.0 / 3.0) * f[2] * f[4] - 2.0 / 3.0 * x168;
                T x190 = x18 * x51 + x189 * x67;
                T x191 = (4.0 / 3.0) * f[2] * f[4] - 4.0 / 3.0 * x168;
                T x192 = 2 * x48;
                T x193 = 2 * x49;
                T x194 = 2 * f[6] * x31 - x30 * x51 - x41 * x50 - x46 * x59;
                T x195 = x191 * x76 + x194 * x55 + x40 * (-x192 - x193);
                T x196 = x136 + x175;
                T x197 = f[4] * x126;
                T x198 = (2.0 / 3.0) * f[1] * f[3] - 2.0 / 3.0 * x134;
                T x199 = f[4] * x150;
                T x200 = x157 * x18 + x198 * x67 - x199;
                T x201 = (4.0 / 3.0) * f[1] * f[3] - 4.0 / 3.0 * x134;
                T x202 = -f[2] * x74 + 2 * f[8] * x31 - x149 * x59 - x157 * x30;
                T x203 = f[4] * x138;
                T x204 = x201 * x76 + x202 * x55 - x203 + x40 * (4 * x121 + x124);
                T x205 = -x156 - x182;
                T x206 = f[5] * x126;
                T x207 = -x206;
                T x208 = (2.0 / 3.0) * x154 - 2.0 / 3.0 * x155;
                T x209 = f[5] * x150;
                T x210 = x101 * x18 + x208 * x67 + x209;
                T x211 = (4.0 / 3.0) * x154 - 4.0 / 3.0 * x155;
                T x212 = 2 * f[7] * x31 - x101 * x30 - x50 * x68 - x59 * x99;
                T x213 = f[5] * x138;
                T x214 = x211 * x76 + x212 * x55 + x213 + x40 * (4 * x141 + x144);
                T x215 = x101 * x90 + x161 * x208;
                T x216 = 2 * x47;
                T x217 = x103 * x212 + x211 * x95 + x40 * (-x193 - x216);
                T x218 = x161 * x189 - x209 + x51 * x90;
                T x219 = x103 * x194 + x191 * x95 - x213 + x40 * (4 * f[1] * f[6] - x142);
                T x220 = f[3] * x126;
                T x221 = -x220;
                T x222 = f[3] * x150;
                T x223 = x157 * x90 + x161 * x198 + x222;
                T x224 = f[3] * x138;
                T x225 = x103 * x202 + x201 * x95 + x224 + x40 * (4 * x109 + x112);
                T x226 = x157 * x97 + x177 * x198;
                T x227 = x107 * x201 + x179 * x202 + x40 * (-x192 - x216);
                T x228 = x101 * x97 + x177 * x208 - x222;
                T x229 = x107 * x211 + x179 * x212 - x224 + x40 * (4 * f[2] * f[7] - x110);
                T x230 = -x197;
                T x231 = x177 * x189 + x199 + x51 * x97;
                T x232 = x107 * x191 + x179 * x194 + x203 + x40 * (4 * f[2] * f[6] - x122);
                T x233 = x5 * (f[2] * f[7] - x109);
                T x234 = x32 * ((5.0 / 3.0) * x109 - 5.0 / 3.0 * x111);
                T x235 = x61 * ((7.0 / 3.0) * x109 - 7.0 / 3.0 * x111);
                T x236 = x5 * (x121 - x123);
                T x237 = x32 * ((5.0 / 3.0) * f[2] * f[6] - 5.0 / 3.0 * x121);
                T x238 = x61 * ((7.0 / 3.0) * f[2] * f[6] - 7.0 / 3.0 * x121);
                T x239 = x5 * (f[1] * f[6] - x141);
                T x240 = x32 * ((5.0 / 3.0) * x141 - 5.0 / 3.0 * x143);
                T x241 = x61 * ((7.0 / 3.0) * x141 - 7.0 / 3.0 * x143);
                T x242 = x114 * x16;
                T x243 = 2 * x21;
                T x244 = x243 + x35;
                T x245 = 2 * x20;
                T x246 = x245 + x38;
                T x247 = x119 * x53;
                T x248 = x16 * x46;
                T x249 = x128 * x248 + x242 * x99;
                T x250 = f[1] * x41;
                T x251 = x116 * x53;
                T x252 = x133 * x247 + x137 * x251 + x40 * (-x250 - x72);
                T x253 = x148 * x248 + x149 * x242;
                T x254 = f[2] * x41;
                T x255 = x153 * x247 + x158 * x251 + x40 * (-x254 - x86);
                T x256 = x128 * x16;
                T x257 = 2 * x19;
                T x258 = x257 + x93;
                T x259 = x133 * x53;
                T x260 = x148 * x16;
                T x261 = x149 * x256 + x260 * x99;
                T x262 = f[2] * x68;
                T x263 = x137 * x53;
                T x264 = x153 * x263 + x158 * x259 + x40 * (-x102 - x262);
                T x265 = x158 * x53;
                T x266 = x189 * x248 + x242 * x51;
                T x267 = 2 * x57;
                T x268 = 2 * x58;
                T x269 = x191 * x247 + x194 * x251 + x40 * (-x267 - x268);
                T x270 = f[2] * x126;
                T x271 = f[2] * x150;
                T x272 = x101 * x242 + x208 * x248 - x271;
                T x273 = f[2] * x138;
                T x274 = x211 * x247 + x212 * x251 - x273 + x40 * (x79 + 4 * x8);
                T x275 = f[1] * x126;
                T x276 = -x275;
                T x277 = f[1] * x150;
                T x278 = x157 * x242 + x198 * x248 + x277;
                T x279 = f[1] * x138;
                T x280 = x201 * x247 + x202 * x251 + x279 + x40 * (4 * x10 + x64);
                T x281 = x16 * x99;
                T x282 = x101 * x256 + x208 * x281;
                T x283 = 2 * x56;
                T x284 = x211 * x263 + x212 * x259 + x40 * (-x268 - x283);
                T x285 = f[0] * x126;
                T x286 = f[0] * x150;
                T x287 = x157 * x256 + x198 * x281 - x286;
                T x288 = f[0] * x138;
                T x289 = x201 * x263 + x202 * x259 - x288 + x40 * (4 * x0 + x3);
                T x290 = -x270;
                T x291 = x189 * x281 + x256 * x51 + x271;
                T x292 = x191 * x263 + x194 * x259 + x273 + x40 * (4 * f[4] * f[6] - x78);
                T x293 = x149 * x16;
                T x294 = x157 * x260 + x198 * x293;
                T x295 = x153 * x53;
                T x296 = x201 * x265 + x202 * x295 + x40 * (-x267 - x283);
                T x297 = x189 * x293 + x260 * x51 - x277;
                T x298 = x191 * x265 + x194 * x295 - x279 + x40 * (4 * f[5] * f[6] - x63);
                T x299 = -x285;
                T x300 = x101 * x260 + x208 * x293 + x286;
                T x301 = x211 * x265 + x212 * x295 + x288 + x40 * (4 * f[5] * f[7] - x1);
                T x302 = x5 * (x168 - x169);
                T x303 = x32 * ((5.0 / 3.0) * f[2] * f[4] - 5.0 / 3.0 * x168);
                T x304 = x61 * ((7.0 / 3.0) * f[2] * f[4] - 7.0 / 3.0 * x168);
                T x305 = x5 * (f[2] * f[3] - x154);
                T x306 = x32 * ((5.0 / 3.0) * x154 - 5.0 / 3.0 * x155);
                T x307 = x61 * ((7.0 / 3.0) * x154 - 7.0 / 3.0 * x155);
                T x308 = x5 * (x134 - x135);
                T x309 = x32 * ((5.0 / 3.0) * f[1] * f[3] - 5.0 / 3.0 * x134);
                T x310 = x61 * ((7.0 / 3.0) * f[1] * f[3] - 7.0 / 3.0 * x134);
                T x311 = x16 * x189;
                T x312 = x243 + x34;
                T x313 = x245 + x37;
                T x314 = x191 * x53;
                T x315 = x16 * x51;
                T x316 = x101 * x311 + x208 * x315;
                T x317 = x194 * x53;
                T x318 = x211 * x317 + x212 * x314 + x40 * (-x250 - x71);
                T x319 = x157 * x311 + x198 * x315;
                T x320 = x201 * x317 + x202 * x314 + x40 * (-x254 - x85);
                T x321 = x16 * x208;
                T x322 = x257 + x92;
                T x323 = x212 * x53;
                T x324 = x101 * x16 * x198 + x157 * x321;
                T x325 = x202 * x53;
                T x326 = x201 * x323 + x211 * x325 + x40 * (-x100 - x262);
                bf[0] +=
                    dx *
                    (grad_test[0] * (grad_trial[0] * (C1 * (4 * f[0] * x18 + x15 + x17 * x33) +
                                                      C2 * (x40 * (x36 + x39) + 2 * x52 * x55 + x54 * x62) + x4 * x6) +
                                     grad_trial[1] * (C1 * (x33 * x66 + x69) + C2 * (x62 * x70 + x77) + x6 * x65) +
                                     grad_trial[2] * (C1 * (x33 * x81 + x83) + C2 * (x62 * x84 + x88) + x6 * x80)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x17 * x91 + x69) + C2 * (x54 * x96 + x77) + x4 * x89) +
                          grad_trial[1] * (C1 * (4 * f[1] * x90 + x15 + x66 * x91) +
                                           C2 * (x40 * (x36 + x94) + 2 * x70 * x95 + x70 * x96) + x65 * x89) +
                          grad_trial[2] * (C1 * (x81 * x91 + x98) + C2 * (x104 + x84 * x96) + x80 * x89)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x106 * x17 + x83) + C2 * (x108 * x54 + x88) + x105 * x4) +
                          grad_trial[1] * (C1 * (x106 * x66 + x98) + C2 * (x104 + x108 * x70) + x105 * x65) +
                          grad_trial[2] * (C1 * (4 * f[2] * x97 + x106 * x81 + x15) +
                                           C2 * (2 * x107 * x84 + x108 * x84 + x40 * (x39 + x94)) + x105 * x80)));
                bf[1] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x114 * x33 + x115) + C2 * (x116 * x62 + x120) + x113 * x6) +
                          grad_trial[1] * (C1 * (x128 * x33 + x132) + C2 * (x133 * x62 + x140) + x125 * x6 + x127) +
                          grad_trial[2] * (C1 * (x148 * x33 + x152) + C2 * (x153 * x62 + x160) + x145 * x6 + x147)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x114 * x91 + x174) + C2 * (x116 * x96 + x176) + x113 * x89 + x173) +
                          grad_trial[1] * (C1 * (x128 * x91 + x162) + C2 * (x133 * x96 + x164) + x125 * x89) +
                          grad_trial[2] * (C1 * (x148 * x91 + x167) + C2 * (x153 * x96 + x172) + x145 * x89 + x165)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x106 * x114 + x181) + C2 * (x108 * x116 + x183) + x105 * x113 + x146) +
                          grad_trial[1] * (C1 * (x106 * x128 + x185) + C2 * (x108 * x133 + x187) + x105 * x125 + x184) +
                          grad_trial[2] * (C1 * (x106 * x148 + x178) + C2 * (x108 * x153 + x180) + x105 * x145)));
                bf[2] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x189 * x33 + x190) + C2 * (x191 * x62 + x195) + x188 * x6) +
                          grad_trial[1] * (C1 * (x208 * x33 + x210) + C2 * (x211 * x62 + x214) + x205 * x6 + x207) +
                          grad_trial[2] * (C1 * (x198 * x33 + x200) + C2 * (x201 * x62 + x204) + x196 * x6 + x197)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x189 * x91 + x218) + C2 * (x191 * x96 + x219) + x188 * x89 + x206) +
                          grad_trial[1] * (C1 * (x208 * x91 + x215) + C2 * (x211 * x96 + x217) + x205 * x89) +
                          grad_trial[2] * (C1 * (x198 * x91 + x223) + C2 * (x201 * x96 + x225) + x196 * x89 + x221)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x106 * x189 + x231) + C2 * (x108 * x191 + x232) + x105 * x188 + x230) +
                          grad_trial[1] * (C1 * (x106 * x208 + x228) + C2 * (x108 * x211 + x229) + x105 * x205 + x220) +
                          grad_trial[2] * (C1 * (x106 * x198 + x226) + C2 * (x108 * x201 + x227) + x105 * x196)));
                bf[3] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x115 + x17 * x234) + C2 * (x120 + x235 * x54) + x233 * x4) +
                          grad_trial[1] * (C1 * (x174 + x234 * x66) + C2 * (x176 + x235 * x70) + x173 + x233 * x65) +
                          grad_trial[2] * (C1 * (x181 + x234 * x81) + C2 * (x183 + x235 * x84) + x146 + x233 * x80)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x132 + x17 * x237) + C2 * (x140 + x238 * x54) + x127 + x236 * x4) +
                          grad_trial[1] * (C1 * (x162 + x237 * x66) + C2 * (x164 + x238 * x70) + x236 * x65) +
                          grad_trial[2] * (C1 * (x185 + x237 * x81) + C2 * (x187 + x238 * x84) + x184 + x236 * x80)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x152 + x17 * x240) + C2 * (x160 + x241 * x54) + x147 + x239 * x4) +
                          grad_trial[1] * (C1 * (x167 + x240 * x66) + C2 * (x172 + x241 * x70) + x165 + x239 * x65) +
                          grad_trial[2] * (C1 * (x178 + x240 * x81) + C2 * (x180 + x241 * x84) + x239 * x80)));
                bf[4] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (4 * f[3] * x242 + x114 * x234 + x15) +
                                           C2 * (x116 * x235 + 2 * x116 * x247 + x40 * (x244 + x246)) + x113 * x233) +
                          grad_trial[1] * (C1 * (x128 * x234 + x249) + C2 * (x133 * x235 + x252) + x125 * x233) +
                          grad_trial[2] * (C1 * (x148 * x234 + x253) + C2 * (x153 * x235 + x255) + x145 * x233)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x114 * x237 + x249) + C2 * (x116 * x238 + x252) + x113 * x236) +
                          grad_trial[1] * (C1 * (4 * f[4] * x256 + x128 * x237 + x15) +
                                           C2 * (x133 * x238 + 2 * x137 * x259 + x40 * (x244 + x258)) + x125 * x236) +
                          grad_trial[2] * (C1 * (x148 * x237 + x261) + C2 * (x153 * x238 + x264) + x145 * x236)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x114 * x240 + x253) + C2 * (x116 * x241 + x255) + x113 * x239) +
                          grad_trial[1] * (C1 * (x128 * x240 + x261) + C2 * (x133 * x241 + x264) + x125 * x239) +
                          grad_trial[2] * (C1 * (4 * f[5] * x260 + x148 * x240 + x15) +
                                           C2 * (x153 * x241 + 2 * x153 * x265 + x40 * (x246 + x258)) + x145 * x239)));
                bf[5] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x189 * x234 + x266) + C2 * (x191 * x235 + x269) + x188 * x233) +
                          grad_trial[1] * (C1 * (x208 * x234 + x272) + C2 * (x211 * x235 + x274) + x205 * x233 + x270) +
                          grad_trial[2] *
                              (C1 * (x198 * x234 + x278) + C2 * (x201 * x235 + x280) + x196 * x233 + x276)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x189 * x237 + x291) + C2 * (x191 * x238 + x292) + x188 * x236 + x290) +
                          grad_trial[1] * (C1 * (x208 * x237 + x282) + C2 * (x211 * x238 + x284) + x205 * x236) +
                          grad_trial[2] *
                              (C1 * (x198 * x237 + x287) + C2 * (x201 * x238 + x289) + x196 * x236 + x285)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x189 * x240 + x297) + C2 * (x191 * x241 + x298) + x188 * x239 + x275) +
                          grad_trial[1] * (C1 * (x208 * x240 + x300) + C2 * (x211 * x241 + x301) + x205 * x239 + x299) +
                          grad_trial[2] * (C1 * (x198 * x240 + x294) + C2 * (x201 * x241 + x296) + x196 * x239)));
                bf[6] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x17 * x303 + x190) + C2 * (x195 + x304 * x54) + x302 * x4) +
                          grad_trial[1] * (C1 * (x218 + x303 * x66) + C2 * (x219 + x304 * x70) + x206 + x302 * x65) +
                          grad_trial[2] * (C1 * (x231 + x303 * x81) + C2 * (x232 + x304 * x84) + x230 + x302 * x80)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x17 * x306 + x210) + C2 * (x214 + x307 * x54) + x207 + x305 * x4) +
                          grad_trial[1] * (C1 * (x215 + x306 * x66) + C2 * (x217 + x307 * x70) + x305 * x65) +
                          grad_trial[2] * (C1 * (x228 + x306 * x81) + C2 * (x229 + x307 * x84) + x220 + x305 * x80)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x17 * x309 + x200) + C2 * (x204 + x310 * x54) + x197 + x308 * x4) +
                          grad_trial[1] * (C1 * (x223 + x309 * x66) + C2 * (x225 + x310 * x70) + x221 + x308 * x65) +
                          grad_trial[2] * (C1 * (x226 + x309 * x81) + C2 * (x227 + x310 * x84) + x308 * x80)));
                bf[7] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x114 * x303 + x266) + C2 * (x116 * x304 + x269) + x113 * x302) +
                          grad_trial[1] * (C1 * (x128 * x303 + x291) + C2 * (x133 * x304 + x292) + x125 * x302 + x290) +
                          grad_trial[2] *
                              (C1 * (x148 * x303 + x297) + C2 * (x153 * x304 + x298) + x145 * x302 + x275)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x114 * x306 + x272) + C2 * (x116 * x307 + x274) + x113 * x305 + x270) +
                          grad_trial[1] * (C1 * (x128 * x306 + x282) + C2 * (x133 * x307 + x284) + x125 * x305) +
                          grad_trial[2] *
                              (C1 * (x148 * x306 + x300) + C2 * (x153 * x307 + x301) + x145 * x305 + x299)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x114 * x309 + x278) + C2 * (x116 * x310 + x280) + x113 * x308 + x276) +
                          grad_trial[1] * (C1 * (x128 * x309 + x287) + C2 * (x133 * x310 + x289) + x125 * x308 + x285) +
                          grad_trial[2] * (C1 * (x148 * x309 + x294) + C2 * (x153 * x310 + x296) + x145 * x308)));
                bf[8] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (4 * f[6] * x311 + x15 + x189 * x303) +
                                           C2 * (x191 * x304 + 2 * x194 * x314 + x40 * (x312 + x313)) + x188 * x302) +
                          grad_trial[1] * (C1 * (x208 * x303 + x316) + C2 * (x211 * x304 + x318) + x205 * x302) +
                          grad_trial[2] * (C1 * (x198 * x303 + x319) + C2 * (x201 * x304 + x320) + x196 * x302)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x189 * x306 + x316) + C2 * (x191 * x307 + x318) + x188 * x305) +
                          grad_trial[1] * (C1 * (4 * f[7] * x321 + x15 + x208 * x306) +
                                           C2 * (x211 * x307 + 2 * x211 * x323 + x40 * (x312 + x322)) + x205 * x305) +
                          grad_trial[2] * (C1 * (x198 * x306 + x324) + C2 * (x201 * x307 + x326) + x196 * x305)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x189 * x309 + x319) + C2 * (x191 * x310 + x320) + x188 * x308) +
                          grad_trial[1] * (C1 * (x208 * x309 + x324) + C2 * (x211 * x310 + x326) + x205 * x308) +
                          grad_trial[2] * (C1 * (4 * x129 * x198 + x15 + x198 * x309) +
                                           C2 * (x201 * x310 + 2 * x201 * x325 + x40 * (x313 + x322)) + x196 * x308)));
            }

            UTOPIA_FUNCTION void gradient(const T *UTOPIA_RESTRICT f,
                                          const T *UTOPIA_RESTRICT grad_test,
                                          const T dx,
                                          T *UTOPIA_RESTRICT lf) const {
                using namespace utopia::device;
                // Automatically generated
                T x0 = f[4] * f[8];
                T x1 = f[5] * f[7];
                T x2 = f[0] * x1;
                T x3 = f[3] * f[8];
                T x4 = f[1] * x3;
                T x5 = f[4] * f[6];
                T x6 = f[2] * x5;
                T x7 =
                    (1.0 / 2.0) * K * (f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x2 - x4 - x6 - 1);
                T x8 = f[5] * f[6];
                T x9 = f[3] * f[7];
                T x10 = f[0] * x0 + f[1] * x8 + f[2] * x9 - x2 - x4 - x6;
                T x11 = pow(x10, -2.0 / 3.0);
                T x12 = 2 * f[0];
                T x13 = pow(f[0], 2) + pow(f[1], 2) + pow(f[2], 2);
                T x14 = pow(f[3], 2) + pow(f[4], 2) + pow(f[5], 2);
                T x15 = pow(f[6], 2) + pow(f[7], 2) + pow(f[8], 2);
                T x16 = x13 + x14 + x15;
                T x17 = x16 / pow(x10, 5.0 / 3.0);
                T x18 = pow(x10, -4.0 / 3.0);
                T x19 = f[0] * f[3] + f[1] * f[4] + f[2] * f[5];
                T x20 = 2 * x19;
                T x21 = f[0] * f[6] + f[1] * f[7] + f[2] * f[8];
                T x22 = 2 * x21;
                T x23 = f[3] * f[6] + f[4] * f[7] + f[5] * f[8];
                T x24 = (-1.0 / 2.0 * pow(x13, 2) - 1.0 / 2.0 * pow(x14, 2) - 1.0 / 2.0 * pow(x15, 2) +
                         (1.0 / 2.0) * pow(x16, 2) - pow(x19, 2) - pow(x21, 2) - pow(x23, 2)) /
                        pow(x10, 7.0 / 3.0);
                T x25 = 2 * f[1];
                T x26 = 2 * f[2];
                T x27 = 2 * f[3];
                T x28 = f[1] * f[8];
                T x29 = f[2] * f[7];
                T x30 = 2 * x23;
                T x31 = 2 * f[4];
                T x32 = f[0] * f[8];
                T x33 = 2 * f[5];
                T x34 = f[0] * f[7];
                T x35 = f[1] * f[6];
                T x36 = 2 * f[6];
                T x37 = f[1] * f[5];
                T x38 = 2 * f[7];
                T x39 = f[0] * f[5];
                T x40 = f[2] * f[3];
                T x41 = 2 * f[8];
                T x42 = f[0] * f[4];
                lf[0] += dx * (grad_test[0] * (C1 * (x11 * x12 + x17 * ((2.0 / 3.0) * f[5] * f[7] - 2.0 / 3.0 * x0)) +
                                               C2 * (x18 * (2 * f[0] * x16 - f[3] * x20 - f[6] * x22 - x12 * x13) +
                                                     x24 * ((4.0 / 3.0) * f[5] * f[7] - 4.0 / 3.0 * x0)) +
                                               x7 * (2 * x0 - 2 * x1)) +
                               grad_test[1] * (C1 * (x11 * x25 + x17 * ((2.0 / 3.0) * x3 - 2.0 / 3.0 * x8)) +
                                               C2 * (x18 * (2 * f[1] * x16 - f[4] * x20 - f[7] * x22 - x13 * x25) +
                                                     x24 * ((4.0 / 3.0) * x3 - 4.0 / 3.0 * x8)) +
                                               x7 * (2 * f[5] * f[6] - 2 * x3)) +
                               grad_test[2] * (C1 * (x11 * x26 + x17 * ((2.0 / 3.0) * f[4] * f[6] - 2.0 / 3.0 * x9)) +
                                               C2 * (x18 * (2 * f[2] * x16 - f[5] * x20 - f[8] * x22 - x13 * x26) +
                                                     x24 * ((4.0 / 3.0) * f[4] * f[6] - 4.0 / 3.0 * x9)) +
                                               x7 * (-2 * x5 + 2 * x9)));
                lf[1] += dx * (grad_test[0] * (C1 * (x11 * x27 + x17 * ((2.0 / 3.0) * x28 - 2.0 / 3.0 * x29)) +
                                               C2 * (x18 * (2 * f[3] * x16 - f[6] * x30 - x12 * x19 - x14 * x27) +
                                                     x24 * ((4.0 / 3.0) * x28 - 4.0 / 3.0 * x29)) +
                                               x7 * (2 * f[2] * f[7] - f[8] * x25)) +
                               grad_test[1] * (C1 * (x11 * x31 + x17 * ((2.0 / 3.0) * f[2] * f[6] - 2.0 / 3.0 * x32)) +
                                               C2 * (x18 * (-f[1] * x20 + 2 * f[4] * x16 - f[7] * x30 - x14 * x31) +
                                                     x24 * ((4.0 / 3.0) * f[2] * f[6] - 4.0 / 3.0 * x32)) +
                                               x7 * (-f[6] * x26 + f[8] * x12)) +
                               grad_test[2] * (C1 * (x11 * x33 + x17 * ((2.0 / 3.0) * x34 - 2.0 / 3.0 * x35)) +
                                               C2 * (x18 * (-f[2] * x20 + 2 * f[5] * x16 - f[8] * x30 - x14 * x33) +
                                                     x24 * ((4.0 / 3.0) * x34 - 4.0 / 3.0 * x35)) +
                                               x7 * (2 * f[1] * f[6] - f[7] * x12)));
                lf[2] += dx * (grad_test[0] * (C1 * (x11 * x36 + x17 * ((2.0 / 3.0) * f[2] * f[4] - 2.0 / 3.0 * x37)) +
                                               C2 * (x18 * (2 * f[6] * x16 - x12 * x21 - x15 * x36 - x23 * x27) +
                                                     x24 * ((4.0 / 3.0) * f[2] * f[4] - 4.0 / 3.0 * x37)) +
                                               x7 * (-f[4] * x26 + f[5] * x25)) +
                               grad_test[1] * (C1 * (x11 * x38 + x17 * ((2.0 / 3.0) * x39 - 2.0 / 3.0 * x40)) +
                                               C2 * (x18 * (-f[1] * x22 - f[4] * x30 + 2 * f[7] * x16 - x15 * x38) +
                                                     x24 * ((4.0 / 3.0) * x39 - 4.0 / 3.0 * x40)) +
                                               x7 * (2 * f[2] * f[3] - f[5] * x12)) +
                               grad_test[2] * (C1 * (x11 * x41 + x17 * ((2.0 / 3.0) * f[1] * f[3] - 2.0 / 3.0 * x42)) +
                                               C2 * (x18 * (-f[2] * x22 - f[5] * x30 + 2 * f[8] * x16 - x15 * x41) +
                                                     x24 * ((4.0 / 3.0) * f[1] * f[3] - 4.0 / 3.0 * x42)) +
                                               x7 * (-f[3] * x25 + f[4] * x12)));
            }

            UTOPIA_FUNCTION void value(const T *UTOPIA_RESTRICT f, const T dx, T &e) const {
                using namespace utopia::device;
                // Automatically generated
                T x0 = f[0] * f[5] * f[7];
                T x1 = f[1] * f[3] * f[8];
                T x2 = f[2] * f[4] * f[6];
                T x3 = pow(f[0], 2) + pow(f[1], 2) + pow(f[2], 2);
                T x4 = pow(f[3], 2) + pow(f[4], 2) + pow(f[5], 2);
                T x5 = pow(f[6], 2) + pow(f[7], 2) + pow(f[8], 2);
                T x6 = x3 + x4 + x5;
                T x7 = f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x0 - x1 - x2;
                e += dx * (C1 * (x6 / pow(x7, 2.0 / 3.0) - 3) +
                           C2 * (-3 + (-1.0 / 2.0 * pow(x3, 2) - 1.0 / 2.0 * pow(x4, 2) - 1.0 / 2.0 * pow(x5, 2) +
                                       (1.0 / 2.0) * pow(x6, 2) - pow(f[0] * f[3] + f[1] * f[4] + f[2] * f[5], 2) -
                                       pow(f[0] * f[6] + f[1] * f[7] + f[2] * f[8], 2) -
                                       pow(f[3] * f[6] + f[4] * f[7] + f[5] * f[8], 2)) /
                                          pow(x7, 4.0 / 3.0)) +
                           (1.0 / 2.0) * K *
                               pow(f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x0 - x1 - x2 - 1, 2));
            }

            UTOPIA_FUNCTION void eval(const T *UTOPIA_RESTRICT f,
                                      const T *grad_test,
                                      const T *grad_trial,
                                      const T dx,
                                      T &e,
                                      T *UTOPIA_RESTRICT lf,
                                      T *UTOPIA_RESTRICT bf) const {
                using namespace utopia::device;
                // Automatically generated
                T x0 = f[5] * f[7];
                T x1 = f[0] * x0;
                T x2 = f[3] * f[8];
                T x3 = f[1] * x2;
                T x4 = f[4] * f[6];
                T x5 = f[2] * x4;
                T x6 = f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x1 - x3 - x5 - 1;
                T x7 = (1.0 / 2.0) * K;
                T x8 = pow(f[0], 2);
                T x9 = pow(f[1], 2);
                T x10 = pow(f[2], 2);
                T x11 = x10 + x8 + x9;
                T x12 = pow(f[3], 2);
                T x13 = pow(f[4], 2);
                T x14 = pow(f[5], 2);
                T x15 = x12 + x13 + x14;
                T x16 = pow(f[6], 2);
                T x17 = pow(f[7], 2);
                T x18 = pow(f[8], 2);
                T x19 = x16 + x17 + x18;
                T x20 = x11 + x15 + x19;
                T x21 = f[4] * f[8];
                T x22 = f[5] * f[6];
                T x23 = f[3] * f[7];
                T x24 = f[0] * x21 + f[1] * x22 + f[2] * x23 - x1 - x3 - x5;
                T x25 = pow(x24, -2.0 / 3.0);
                T x26 = pow(x24, -4.0 / 3.0);
                T x27 = f[0] * f[3];
                T x28 = f[1] * f[4];
                T x29 = f[2] * f[5];
                T x30 = x27 + x28 + x29;
                T x31 = f[0] * f[6];
                T x32 = f[1] * f[7];
                T x33 = f[2] * f[8];
                T x34 = x31 + x32 + x33;
                T x35 = f[3] * f[6];
                T x36 = f[4] * f[7];
                T x37 = f[5] * f[8];
                T x38 = x35 + x36 + x37;
                T x39 = -1.0 / 2.0 * pow(x11, 2) - 1.0 / 2.0 * pow(x15, 2) - 1.0 / 2.0 * pow(x19, 2) +
                        (1.0 / 2.0) * pow(x20, 2) - pow(x30, 2) - pow(x34, 2) - pow(x38, 2);
                T x40 = 2 * x21;
                T x41 = -2 * x0;
                T x42 = x40 + x41;
                T x43 = x6 * x7;
                T x44 = 2 * x25;
                T x45 = (2.0 / 3.0) * f[5] * f[7] - 2.0 / 3.0 * x21;
                T x46 = pow(x24, -5.0 / 3.0);
                T x47 = x20 * x46;
                T x48 = 2 * f[0];
                T x49 = 2 * x30;
                T x50 = 2 * x34;
                T x51 = 2 * f[0] * x20 - f[3] * x49 - f[6] * x50 - x11 * x48;
                T x52 = (4.0 / 3.0) * f[5] * f[7] - 4.0 / 3.0 * x21;
                T x53 = pow(x24, -7.0 / 3.0);
                T x54 = x39 * x53;
                T x55 = 2 * x2;
                T x56 = -2 * x22;
                T x57 = -x55 - x56;
                T x58 = (2.0 / 3.0) * x2 - 2.0 / 3.0 * x22;
                T x59 = 2 * f[1];
                T x60 = 2 * f[1] * x20 - f[4] * x49 - f[7] * x50 - x11 * x59;
                T x61 = (4.0 / 3.0) * x2 - 4.0 / 3.0 * x22;
                T x62 = 2 * x23;
                T x63 = -2 * x4;
                T x64 = x62 + x63;
                T x65 = (2.0 / 3.0) * f[4] * f[6] - 2.0 / 3.0 * x23;
                T x66 = 2 * f[2];
                T x67 = 2 * f[2] * x20 - f[5] * x49 - f[8] * x50 - x11 * x66;
                T x68 = (4.0 / 3.0) * f[4] * f[6] - 4.0 / 3.0 * x23;
                T x69 = f[1] * f[8];
                T x70 = 2 * x69;
                T x71 = f[2] * f[7];
                T x72 = -2 * x71;
                T x73 = -x70 - x72;
                T x74 = (2.0 / 3.0) * x69 - 2.0 / 3.0 * x71;
                T x75 = 2 * f[3];
                T x76 = 2 * x38;
                T x77 = 2 * f[3] * x20 - f[6] * x76 - x15 * x75 - x30 * x48;
                T x78 = (4.0 / 3.0) * x69 - 4.0 / 3.0 * x71;
                T x79 = f[0] * f[8];
                T x80 = 2 * x79;
                T x81 = f[2] * f[6];
                T x82 = -2 * x81;
                T x83 = x80 + x82;
                T x84 = (2.0 / 3.0) * f[2] * f[6] - 2.0 / 3.0 * x79;
                T x85 = 2 * f[4];
                T x86 = -f[1] * x49 + 2 * f[4] * x20 - f[7] * x76 - x15 * x85;
                T x87 = (4.0 / 3.0) * f[2] * f[6] - 4.0 / 3.0 * x79;
                T x88 = f[0] * f[7];
                T x89 = 2 * x88;
                T x90 = f[1] * f[6];
                T x91 = -2 * x90;
                T x92 = -x89 - x91;
                T x93 = (2.0 / 3.0) * x88 - 2.0 / 3.0 * x90;
                T x94 = 2 * f[5];
                T x95 = -f[2] * x49 + 2 * f[5] * x20 - f[8] * x76 - x15 * x94;
                T x96 = (4.0 / 3.0) * x88 - 4.0 / 3.0 * x90;
                T x97 = f[1] * f[5];
                T x98 = 2 * x97;
                T x99 = f[2] * f[4];
                T x100 = -2 * x99;
                T x101 = x100 + x98;
                T x102 = (2.0 / 3.0) * f[2] * f[4] - 2.0 / 3.0 * x97;
                T x103 = 2 * f[6];
                T x104 = 2 * f[6] * x20 - x103 * x19 - x34 * x48 - x38 * x75;
                T x105 = (4.0 / 3.0) * f[2] * f[4] - 4.0 / 3.0 * x97;
                T x106 = f[0] * f[5];
                T x107 = 2 * x106;
                T x108 = f[2] * f[3];
                T x109 = -2 * x108;
                T x110 = -x107 - x109;
                T x111 = (2.0 / 3.0) * x106 - 2.0 / 3.0 * x108;
                T x112 = 2 * f[7];
                T x113 = -f[1] * x50 - f[4] * x76 + 2 * f[7] * x20 - x112 * x19;
                T x114 = (4.0 / 3.0) * x106 - 4.0 / 3.0 * x108;
                T x115 = f[0] * f[4];
                T x116 = 2 * x115;
                T x117 = f[1] * f[3];
                T x118 = -2 * x117;
                T x119 = x116 + x118;
                T x120 = (2.0 / 3.0) * f[1] * f[3] - 2.0 / 3.0 * x115;
                T x121 = 2 * f[8];
                T x122 = -f[2] * x50 - f[5] * x76 + 2 * f[8] * x20 - x121 * x19;
                T x123 = (4.0 / 3.0) * f[1] * f[3] - 4.0 / 3.0 * x115;
                T x124 = x7 * (-x0 + x21);
                T x125 = x45 * x46;
                T x126 = x20 / pow(x24, 8.0 / 3.0);
                T x127 = x126 * ((5.0 / 3.0) * f[5] * f[7] - 5.0 / 3.0 * x21);
                T x128 = 2 * x14;
                T x129 = 2 * x18;
                T x130 = x128 + x129;
                T x131 = 2 * x13;
                T x132 = 2 * x17;
                T x133 = x131 + x132;
                T x134 = x52 * x53;
                T x135 = x39 / pow(x24, 10.0 / 3.0);
                T x136 = x135 * ((7.0 / 3.0) * f[5] * f[7] - 7.0 / 3.0 * x21);
                T x137 = x46 * x48;
                T x138 = x125 * x59 + x137 * x58;
                T x139 = f[4] * x75;
                T x140 = f[7] * x103;
                T x141 = x51 * x53;
                T x142 = x134 * x60 + x141 * x61 + x26 * (-x139 - x140);
                T x143 = x125 * x66 + x137 * x65;
                T x144 = f[5] * x75;
                T x145 = f[8] * x103;
                T x146 = x134 * x67 + x141 * x68 + x26 * (-x144 - x145);
                T x147 = x7 * (f[5] * f[6] - x2);
                T x148 = x46 * x58;
                T x149 = x126 * ((5.0 / 3.0) * x2 - 5.0 / 3.0 * x22);
                T x150 = 2 * x12;
                T x151 = 2 * x16;
                T x152 = x150 + x151;
                T x153 = x53 * x60;
                T x154 = x135 * ((7.0 / 3.0) * x2 - 7.0 / 3.0 * x22);
                T x155 = x46 * x65;
                T x156 = x148 * x66 + x155 * x59;
                T x157 = f[5] * x85;
                T x158 = f[8] * x112;
                T x159 = x53 * x61;
                T x160 = x153 * x68 + x159 * x67 + x26 * (-x157 - x158);
                T x161 = x7 * (x23 - x4);
                T x162 = x126 * ((5.0 / 3.0) * f[4] * f[6] - 5.0 / 3.0 * x23);
                T x163 = x53 * x67;
                T x164 = x135 * ((7.0 / 3.0) * f[4] * f[6] - 7.0 / 3.0 * x23);
                T x165 = x125 * x75 + x137 * x74;
                T x166 = 2 * x28;
                T x167 = 2 * x29;
                T x168 = x134 * x77 + x141 * x78 + x26 * (-x166 - x167);
                T x169 = K * x6;
                T x170 = f[8] * x169;
                T x171 = (2.0 / 3.0) * x47;
                T x172 = f[8] * x171;
                T x173 = x125 * x85 + x137 * x84 - x172;
                T x174 = (4.0 / 3.0) * x54;
                T x175 = f[8] * x174;
                T x176 = x134 * x86 + x141 * x87 - x175 + x26 * (4 * x115 + x118);
                T x177 = f[7] * x169;
                T x178 = -x177;
                T x179 = f[7] * x171;
                T x180 = x125 * x94 + x137 * x93 + x179;
                T x181 = f[7] * x174;
                T x182 = x134 * x95 + x141 * x96 + x181 + x26 * (4 * x106 + x109);
                T x183 = x46 * x59;
                T x184 = x148 * x85 + x183 * x84;
                T x185 = 2 * x27;
                T x186 = x153 * x87 + x159 * x86 + x26 * (-x167 - x185);
                T x187 = f[6] * x169;
                T x188 = f[6] * x171;
                T x189 = x148 * x94 + x183 * x93 - x188;
                T x190 = f[6] * x174;
                T x191 = x153 * x96 + x159 * x95 - x190 + x26 * (x100 + 4 * x97);
                T x192 = -x170;
                T x193 = x148 * x75 + x172 + x183 * x74;
                T x194 = x153 * x78 + x159 * x77 + x175 + x26 * (4 * f[1] * f[3] - x116);
                T x195 = x46 * x66;
                T x196 = x155 * x94 + x195 * x93;
                T x197 = x53 * x68;
                T x198 = x163 * x96 + x197 * x95 + x26 * (-x166 - x185);
                T x199 = x155 * x75 - x179 + x195 * x74;
                T x200 = x163 * x78 - x181 + x197 * x77 + x26 * (4 * f[2] * f[3] - x107);
                T x201 = -x187;
                T x202 = x155 * x85 + x188 + x195 * x84;
                T x203 = x163 * x87 + x190 + x197 * x86 + x26 * (4 * f[2] * f[4] - x98);
                T x204 = x102 * x137 + x103 * x125;
                T x205 = 2 * x32;
                T x206 = 2 * x33;
                T x207 = x104 * x134 + x105 * x141 + x26 * (-x205 - x206);
                T x208 = f[4] * x169;
                T x209 = f[4] * x171;
                T x210 = x120 * x137 + x121 * x125 - x209;
                T x211 = f[4] * x174;
                T x212 = x122 * x134 + x123 * x141 - x211 + x26 * (4 * x79 + x82);
                T x213 = f[5] * x169;
                T x214 = -x213;
                T x215 = f[5] * x171;
                T x216 = x111 * x137 + x112 * x125 + x215;
                T x217 = f[5] * x174;
                T x218 = x113 * x134 + x114 * x141 + x217 + x26 * (4 * x88 + x91);
                T x219 = x111 * x183 + x112 * x148;
                T x220 = 2 * x31;
                T x221 = x113 * x159 + x114 * x153 + x26 * (-x206 - x220);
                T x222 = x102 * x183 + x103 * x148 - x215;
                T x223 = x104 * x159 + x105 * x153 - x217 + x26 * (4 * f[1] * f[6] - x89);
                T x224 = f[3] * x169;
                T x225 = -x224;
                T x226 = f[3] * x171;
                T x227 = x120 * x183 + x121 * x148 + x226;
                T x228 = f[3] * x174;
                T x229 = x122 * x159 + x123 * x153 + x228 + x26 * (4 * x69 + x72);
                T x230 = x120 * x195 + x121 * x155;
                T x231 = x122 * x197 + x123 * x163 + x26 * (-x205 - x220);
                T x232 = x111 * x195 + x112 * x155 - x226;
                T x233 = x113 * x197 + x114 * x163 - x228 + x26 * (4 * f[2] * f[7] - x70);
                T x234 = -x208;
                T x235 = x102 * x195 + x103 * x155 + x209;
                T x236 = x104 * x197 + x105 * x163 + x211 + x26 * (4 * f[2] * f[6] - x80);
                T x237 = x7 * (f[2] * f[7] - x69);
                T x238 = x126 * ((5.0 / 3.0) * x69 - 5.0 / 3.0 * x71);
                T x239 = x135 * ((7.0 / 3.0) * x69 - 7.0 / 3.0 * x71);
                T x240 = x7 * (x79 - x81);
                T x241 = x126 * ((5.0 / 3.0) * f[2] * f[6] - 5.0 / 3.0 * x79);
                T x242 = x135 * ((7.0 / 3.0) * f[2] * f[6] - 7.0 / 3.0 * x79);
                T x243 = x7 * (f[1] * f[6] - x88);
                T x244 = x126 * ((5.0 / 3.0) * x88 - 5.0 / 3.0 * x90);
                T x245 = x135 * ((7.0 / 3.0) * x88 - 7.0 / 3.0 * x90);
                T x246 = x46 * x74;
                T x247 = 2 * x10;
                T x248 = x129 + x247;
                T x249 = 2 * x9;
                T x250 = x132 + x249;
                T x251 = x53 * x77;
                T x252 = x46 * x75;
                T x253 = x246 * x85 + x252 * x84;
                T x254 = f[1] * x48;
                T x255 = x53 * x78;
                T x256 = x251 * x87 + x255 * x86 + x26 * (-x140 - x254);
                T x257 = x246 * x94 + x252 * x93;
                T x258 = f[2] * x48;
                T x259 = x251 * x96 + x255 * x95 + x26 * (-x145 - x258);
                T x260 = x46 * x84;
                T x261 = 2 * x8;
                T x262 = x151 + x261;
                T x263 = x53 * x87;
                T x264 = x46 * x93;
                T x265 = x260 * x94 + x264 * x85;
                T x266 = f[2] * x59;
                T x267 = x53 * x86;
                T x268 = x26 * (-x158 - x266) + x263 * x95 + x267 * x96;
                T x269 = x53 * x95;
                T x270 = x102 * x252 + x103 * x246;
                T x271 = 2 * x36;
                T x272 = 2 * x37;
                T x273 = x104 * x255 + x105 * x251 + x26 * (-x271 - x272);
                T x274 = f[2] * x169;
                T x275 = f[2] * x171;
                T x276 = x111 * x252 + x112 * x246 - x275;
                T x277 = f[2] * x174;
                T x278 = x113 * x255 + x114 * x251 + x26 * (4 * x23 + x63) - x277;
                T x279 = f[1] * x169;
                T x280 = -x279;
                T x281 = f[1] * x171;
                T x282 = x120 * x252 + x121 * x246 + x281;
                T x283 = f[1] * x174;
                T x284 = x122 * x255 + x123 * x251 + x26 * (4 * x2 + x56) + x283;
                T x285 = x46 * x85;
                T x286 = x111 * x285 + x112 * x260;
                T x287 = 2 * x35;
                T x288 = x113 * x263 + x114 * x267 + x26 * (-x272 - x287);
                T x289 = f[0] * x169;
                T x290 = f[0] * x171;
                T x291 = x120 * x285 + x121 * x260 - x290;
                T x292 = f[0] * x174;
                T x293 = x122 * x263 + x123 * x267 + x26 * (4 * x21 + x41) - x292;
                T x294 = -x274;
                T x295 = x102 * x285 + x103 * x260 + x275;
                T x296 = x104 * x263 + x105 * x267 + x26 * (4 * f[4] * f[6] - x62) + x277;
                T x297 = x46 * x94;
                T x298 = x120 * x297 + x121 * x264;
                T x299 = x53 * x96;
                T x300 = x122 * x299 + x123 * x269 + x26 * (-x271 - x287);
                T x301 = x102 * x297 + x103 * x264 - x281;
                T x302 = x104 * x299 + x105 * x269 + x26 * (4 * f[5] * f[6] - x55) - x283;
                T x303 = -x289;
                T x304 = x111 * x297 + x112 * x264 + x290;
                T x305 = x113 * x299 + x114 * x269 + x26 * (4 * f[5] * f[7] - x40) + x292;
                T x306 = x7 * (x97 - x99);
                T x307 = x126 * ((5.0 / 3.0) * f[2] * f[4] - 5.0 / 3.0 * x97);
                T x308 = x135 * ((7.0 / 3.0) * f[2] * f[4] - 7.0 / 3.0 * x97);
                T x309 = x7 * (f[2] * f[3] - x106);
                T x310 = x126 * ((5.0 / 3.0) * x106 - 5.0 / 3.0 * x108);
                T x311 = x135 * ((7.0 / 3.0) * x106 - 7.0 / 3.0 * x108);
                T x312 = x7 * (x115 - x117);
                T x313 = x126 * ((5.0 / 3.0) * f[1] * f[3] - 5.0 / 3.0 * x115);
                T x314 = x135 * ((7.0 / 3.0) * f[1] * f[3] - 7.0 / 3.0 * x115);
                T x315 = x102 * x46;
                T x316 = x128 + x247;
                T x317 = x131 + x249;
                T x318 = x105 * x53;
                T x319 = x103 * x46;
                T x320 = x111 * x319 + x112 * x315;
                T x321 = x104 * x53;
                T x322 = x113 * x318 + x114 * x321 + x26 * (-x139 - x254);
                T x323 = x120 * x319 + x121 * x315;
                T x324 = x122 * x318 + x123 * x321 + x26 * (-x144 - x258);
                T x325 = x111 * x46;
                T x326 = x150 + x261;
                T x327 = x113 * x53;
                T x328 = x120 * x46;
                T x329 = x112 * x328 + x121 * x325;
                T x330 = x122 * x53;
                T x331 = x114 * x330 + x123 * x327 + x26 * (-x157 - x266);
                e += dx * (C1 * (x20 * x25 - 3) + C2 * (x26 * x39 - 3) + pow(x6, 2) * x7);
                lf[0] +=
                    dx * (grad_test[0] * (C1 * (f[0] * x44 + x45 * x47) + C2 * (x26 * x51 + x52 * x54) + x42 * x43) +
                          grad_test[1] * (C1 * (f[1] * x44 + x47 * x58) + C2 * (x26 * x60 + x54 * x61) + x43 * x57) +
                          grad_test[2] * (C1 * (f[2] * x44 + x47 * x65) + C2 * (x26 * x67 + x54 * x68) + x43 * x64));
                lf[1] +=
                    dx * (grad_test[0] * (C1 * (f[3] * x44 + x47 * x74) + C2 * (x26 * x77 + x54 * x78) + x43 * x73) +
                          grad_test[1] * (C1 * (f[4] * x44 + x47 * x84) + C2 * (x26 * x86 + x54 * x87) + x43 * x83) +
                          grad_test[2] * (C1 * (f[5] * x44 + x47 * x93) + C2 * (x26 * x95 + x54 * x96) + x43 * x92));
                lf[2] +=
                    dx *
                    (grad_test[0] * (C1 * (f[6] * x44 + x102 * x47) + C2 * (x104 * x26 + x105 * x54) + x101 * x43) +
                     grad_test[1] * (C1 * (f[7] * x44 + x111 * x47) + C2 * (x113 * x26 + x114 * x54) + x110 * x43) +
                     grad_test[2] * (C1 * (f[8] * x44 + x120 * x47) + C2 * (x122 * x26 + x123 * x54) + x119 * x43));
                bf[0] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (4 * f[0] * x125 + x127 * x45 + x44) +
                                           C2 * (2 * x134 * x51 + x136 * x52 + x26 * (x130 + x133)) + x124 * x42) +
                          grad_trial[1] * (C1 * (x127 * x58 + x138) + C2 * (x136 * x61 + x142) + x124 * x57) +
                          grad_trial[2] * (C1 * (x127 * x65 + x143) + C2 * (x136 * x68 + x146) + x124 * x64)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x138 + x149 * x45) + C2 * (x142 + x154 * x52) + x147 * x42) +
                          grad_trial[1] * (C1 * (4 * f[1] * x148 + x149 * x58 + x44) +
                                           C2 * (2 * x153 * x61 + x154 * x61 + x26 * (x130 + x152)) + x147 * x57) +
                          grad_trial[2] * (C1 * (x149 * x65 + x156) + C2 * (x154 * x68 + x160) + x147 * x64)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x143 + x162 * x45) + C2 * (x146 + x164 * x52) + x161 * x42) +
                          grad_trial[1] * (C1 * (x156 + x162 * x58) + C2 * (x160 + x164 * x61) + x161 * x57) +
                          grad_trial[2] * (C1 * (4 * f[2] * x155 + x162 * x65 + x44) +
                                           C2 * (2 * x163 * x68 + x164 * x68 + x26 * (x133 + x152)) + x161 * x64)));
                bf[1] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x127 * x74 + x165) + C2 * (x136 * x78 + x168) + x124 * x73) +
                          grad_trial[1] * (C1 * (x127 * x84 + x173) + C2 * (x136 * x87 + x176) + x124 * x83 + x170) +
                          grad_trial[2] * (C1 * (x127 * x93 + x180) + C2 * (x136 * x96 + x182) + x124 * x92 + x178)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x149 * x74 + x193) + C2 * (x154 * x78 + x194) + x147 * x73 + x192) +
                          grad_trial[1] * (C1 * (x149 * x84 + x184) + C2 * (x154 * x87 + x186) + x147 * x83) +
                          grad_trial[2] * (C1 * (x149 * x93 + x189) + C2 * (x154 * x96 + x191) + x147 * x92 + x187)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x162 * x74 + x199) + C2 * (x164 * x78 + x200) + x161 * x73 + x177) +
                          grad_trial[1] * (C1 * (x162 * x84 + x202) + C2 * (x164 * x87 + x203) + x161 * x83 + x201) +
                          grad_trial[2] * (C1 * (x162 * x93 + x196) + C2 * (x164 * x96 + x198) + x161 * x92)));
                bf[2] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x102 * x127 + x204) + C2 * (x105 * x136 + x207) + x101 * x124) +
                          grad_trial[1] * (C1 * (x111 * x127 + x216) + C2 * (x114 * x136 + x218) + x110 * x124 + x214) +
                          grad_trial[2] *
                              (C1 * (x120 * x127 + x210) + C2 * (x123 * x136 + x212) + x119 * x124 + x208)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x102 * x149 + x222) + C2 * (x105 * x154 + x223) + x101 * x147 + x213) +
                          grad_trial[1] * (C1 * (x111 * x149 + x219) + C2 * (x114 * x154 + x221) + x110 * x147) +
                          grad_trial[2] *
                              (C1 * (x120 * x149 + x227) + C2 * (x123 * x154 + x229) + x119 * x147 + x225)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x102 * x162 + x235) + C2 * (x105 * x164 + x236) + x101 * x161 + x234) +
                          grad_trial[1] * (C1 * (x111 * x162 + x232) + C2 * (x114 * x164 + x233) + x110 * x161 + x224) +
                          grad_trial[2] * (C1 * (x120 * x162 + x230) + C2 * (x123 * x164 + x231) + x119 * x161)));
                bf[3] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x165 + x238 * x45) + C2 * (x168 + x239 * x52) + x237 * x42) +
                          grad_trial[1] * (C1 * (x193 + x238 * x58) + C2 * (x194 + x239 * x61) + x192 + x237 * x57) +
                          grad_trial[2] * (C1 * (x199 + x238 * x65) + C2 * (x200 + x239 * x68) + x177 + x237 * x64)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x173 + x241 * x45) + C2 * (x176 + x242 * x52) + x170 + x240 * x42) +
                          grad_trial[1] * (C1 * (x184 + x241 * x58) + C2 * (x186 + x242 * x61) + x240 * x57) +
                          grad_trial[2] * (C1 * (x202 + x241 * x65) + C2 * (x203 + x242 * x68) + x201 + x240 * x64)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x180 + x244 * x45) + C2 * (x182 + x245 * x52) + x178 + x243 * x42) +
                          grad_trial[1] * (C1 * (x189 + x244 * x58) + C2 * (x191 + x245 * x61) + x187 + x243 * x57) +
                          grad_trial[2] * (C1 * (x196 + x244 * x65) + C2 * (x198 + x245 * x68) + x243 * x64)));
                bf[4] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (4 * f[3] * x246 + x238 * x74 + x44) +
                                           C2 * (x239 * x78 + 2 * x251 * x78 + x26 * (x248 + x250)) + x237 * x73) +
                          grad_trial[1] * (C1 * (x238 * x84 + x253) + C2 * (x239 * x87 + x256) + x237 * x83) +
                          grad_trial[2] * (C1 * (x238 * x93 + x257) + C2 * (x239 * x96 + x259) + x237 * x92)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x241 * x74 + x253) + C2 * (x242 * x78 + x256) + x240 * x73) +
                          grad_trial[1] * (C1 * (4 * f[4] * x260 + x241 * x84 + x44) +
                                           C2 * (x242 * x87 + x26 * (x248 + x262) + 2 * x263 * x86) + x240 * x83) +
                          grad_trial[2] * (C1 * (x241 * x93 + x265) + C2 * (x242 * x96 + x268) + x240 * x92)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x244 * x74 + x257) + C2 * (x245 * x78 + x259) + x243 * x73) +
                          grad_trial[1] * (C1 * (x244 * x84 + x265) + C2 * (x245 * x87 + x268) + x243 * x83) +
                          grad_trial[2] * (C1 * (4 * f[5] * x264 + x244 * x93 + x44) +
                                           C2 * (x245 * x96 + x26 * (x250 + x262) + 2 * x269 * x96) + x243 * x92)));
                bf[5] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x102 * x238 + x270) + C2 * (x105 * x239 + x273) + x101 * x237) +
                          grad_trial[1] * (C1 * (x111 * x238 + x276) + C2 * (x114 * x239 + x278) + x110 * x237 + x274) +
                          grad_trial[2] *
                              (C1 * (x120 * x238 + x282) + C2 * (x123 * x239 + x284) + x119 * x237 + x280)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x102 * x241 + x295) + C2 * (x105 * x242 + x296) + x101 * x240 + x294) +
                          grad_trial[1] * (C1 * (x111 * x241 + x286) + C2 * (x114 * x242 + x288) + x110 * x240) +
                          grad_trial[2] *
                              (C1 * (x120 * x241 + x291) + C2 * (x123 * x242 + x293) + x119 * x240 + x289)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x102 * x244 + x301) + C2 * (x105 * x245 + x302) + x101 * x243 + x279) +
                          grad_trial[1] * (C1 * (x111 * x244 + x304) + C2 * (x114 * x245 + x305) + x110 * x243 + x303) +
                          grad_trial[2] * (C1 * (x120 * x244 + x298) + C2 * (x123 * x245 + x300) + x119 * x243)));
                bf[6] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x204 + x307 * x45) + C2 * (x207 + x308 * x52) + x306 * x42) +
                          grad_trial[1] * (C1 * (x222 + x307 * x58) + C2 * (x223 + x308 * x61) + x213 + x306 * x57) +
                          grad_trial[2] * (C1 * (x235 + x307 * x65) + C2 * (x236 + x308 * x68) + x234 + x306 * x64)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x216 + x310 * x45) + C2 * (x218 + x311 * x52) + x214 + x309 * x42) +
                          grad_trial[1] * (C1 * (x219 + x310 * x58) + C2 * (x221 + x311 * x61) + x309 * x57) +
                          grad_trial[2] * (C1 * (x232 + x310 * x65) + C2 * (x233 + x311 * x68) + x224 + x309 * x64)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x210 + x313 * x45) + C2 * (x212 + x314 * x52) + x208 + x312 * x42) +
                          grad_trial[1] * (C1 * (x227 + x313 * x58) + C2 * (x229 + x314 * x61) + x225 + x312 * x57) +
                          grad_trial[2] * (C1 * (x230 + x313 * x65) + C2 * (x231 + x314 * x68) + x312 * x64)));
                bf[7] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (x270 + x307 * x74) + C2 * (x273 + x308 * x78) + x306 * x73) +
                          grad_trial[1] * (C1 * (x295 + x307 * x84) + C2 * (x296 + x308 * x87) + x294 + x306 * x83) +
                          grad_trial[2] * (C1 * (x301 + x307 * x93) + C2 * (x302 + x308 * x96) + x279 + x306 * x92)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x276 + x310 * x74) + C2 * (x278 + x311 * x78) + x274 + x309 * x73) +
                          grad_trial[1] * (C1 * (x286 + x310 * x84) + C2 * (x288 + x311 * x87) + x309 * x83) +
                          grad_trial[2] * (C1 * (x304 + x310 * x93) + C2 * (x305 + x311 * x96) + x303 + x309 * x92)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x282 + x313 * x74) + C2 * (x284 + x314 * x78) + x280 + x312 * x73) +
                          grad_trial[1] * (C1 * (x291 + x313 * x84) + C2 * (x293 + x314 * x87) + x289 + x312 * x83) +
                          grad_trial[2] * (C1 * (x298 + x313 * x93) + C2 * (x300 + x314 * x96) + x312 * x92)));
                bf[8] +=
                    dx *
                    (grad_test[0] *
                         (grad_trial[0] * (C1 * (4 * f[6] * x315 + x102 * x307 + x44) +
                                           C2 * (2 * x104 * x318 + x105 * x308 + x26 * (x316 + x317)) + x101 * x306) +
                          grad_trial[1] * (C1 * (x111 * x307 + x320) + C2 * (x114 * x308 + x322) + x110 * x306) +
                          grad_trial[2] * (C1 * (x120 * x307 + x323) + C2 * (x123 * x308 + x324) + x119 * x306)) +
                     grad_test[1] *
                         (grad_trial[0] * (C1 * (x102 * x310 + x320) + C2 * (x105 * x311 + x322) + x101 * x309) +
                          grad_trial[1] * (C1 * (4 * f[7] * x325 + x111 * x310 + x44) +
                                           C2 * (x114 * x311 + 2 * x114 * x327 + x26 * (x316 + x326)) + x110 * x309) +
                          grad_trial[2] * (C1 * (x120 * x310 + x329) + C2 * (x123 * x311 + x331) + x119 * x309)) +
                     grad_test[2] *
                         (grad_trial[0] * (C1 * (x102 * x313 + x323) + C2 * (x105 * x314 + x324) + x101 * x312) +
                          grad_trial[1] * (C1 * (x111 * x313 + x329) + C2 * (x114 * x314 + x331) + x110 * x312) +
                          grad_trial[2] * (C1 * (4 * f[8] * x328 + x120 * x313 + x44) +
                                           C2 * (x123 * x314 + 2 * x123 * x330 + x26 * (x317 + x326)) + x119 * x312)));
            }

            UTOPIA_FUNCTION void apply(const T *UTOPIA_RESTRICT f,
                                       const T *grad_test,
                                       const T *disp_grad,
                                       const T dx,
                                       T *UTOPIA_RESTRICT res) const {
                using namespace utopia::device;
                // Automatically generated
                T x0 = f[4] * f[8];
                T x1 = 2 * x0;
                T x2 = f[5] * f[7];
                T x3 = -2 * x2;
                T x4 = x1 + x3;
                T x5 = (1.0 / 2.0) * K;
                T x6 = x5 * (x0 - x2);
                T x7 = f[5] * f[6];
                T x8 = f[3] * f[7];
                T x9 = f[0] * x2;
                T x10 = f[3] * f[8];
                T x11 = f[1] * x10;
                T x12 = f[4] * f[6];
                T x13 = f[2] * x12;
                T x14 = f[0] * x0 + f[1] * x7 + f[2] * x8 - x11 - x13 - x9;
                T x15 = 2 / pow(x14, 2.0 / 3.0);
                T x16 = pow(x14, -5.0 / 3.0);
                T x17 = (2.0 / 3.0) * f[5] * f[7] - 2.0 / 3.0 * x0;
                T x18 = x16 * x17;
                T x19 = pow(f[0], 2);
                T x20 = pow(f[1], 2);
                T x21 = pow(f[2], 2);
                T x22 = x19 + x20 + x21;
                T x23 = pow(f[3], 2);
                T x24 = pow(f[4], 2);
                T x25 = pow(f[5], 2);
                T x26 = x23 + x24 + x25;
                T x27 = pow(f[6], 2);
                T x28 = pow(f[7], 2);
                T x29 = pow(f[8], 2);
                T x30 = x27 + x28 + x29;
                T x31 = x22 + x26 + x30;
                T x32 = x31 / pow(x14, 8.0 / 3.0);
                T x33 = x32 * ((5.0 / 3.0) * f[5] * f[7] - 5.0 / 3.0 * x0);
                T x34 = 2 * x25;
                T x35 = 2 * x29;
                T x36 = x34 + x35;
                T x37 = 2 * x24;
                T x38 = 2 * x28;
                T x39 = x37 + x38;
                T x40 = pow(x14, -4.0 / 3.0);
                T x41 = 2 * f[0];
                T x42 = f[0] * f[3];
                T x43 = f[1] * f[4];
                T x44 = f[2] * f[5];
                T x45 = x42 + x43 + x44;
                T x46 = 2 * f[3];
                T x47 = f[0] * f[6];
                T x48 = f[1] * f[7];
                T x49 = f[2] * f[8];
                T x50 = x47 + x48 + x49;
                T x51 = 2 * f[6];
                T x52 = 2 * f[0] * x31 - x22 * x41 - x45 * x46 - x50 * x51;
                T x53 = pow(x14, -7.0 / 3.0);
                T x54 = (4.0 / 3.0) * f[5] * f[7] - 4.0 / 3.0 * x0;
                T x55 = x53 * x54;
                T x56 = f[3] * f[6];
                T x57 = f[4] * f[7];
                T x58 = f[5] * f[8];
                T x59 = x56 + x57 + x58;
                T x60 = -1.0 / 2.0 * pow(x22, 2) - 1.0 / 2.0 * pow(x26, 2) - 1.0 / 2.0 * pow(x30, 2) +
                        (1.0 / 2.0) * pow(x31, 2) - pow(x45, 2) - pow(x50, 2) - pow(x59, 2);
                T x61 = x60 / pow(x14, 10.0 / 3.0);
                T x62 = x61 * ((7.0 / 3.0) * f[5] * f[7] - 7.0 / 3.0 * x0);
                T x63 = 2 * x10;
                T x64 = -2 * x7;
                T x65 = -x63 - x64;
                T x66 = (2.0 / 3.0) * x10 - 2.0 / 3.0 * x7;
                T x67 = x16 * x41;
                T x68 = 2 * f[1];
                T x69 = x18 * x68 + x66 * x67;
                T x70 = (4.0 / 3.0) * x10 - 4.0 / 3.0 * x7;
                T x71 = f[4] * x46;
                T x72 = f[7] * x51;
                T x73 = 2 * x45;
                T x74 = 2 * x50;
                T x75 = 2 * f[1] * x31 - f[4] * x73 - f[7] * x74 - x22 * x68;
                T x76 = x52 * x53;
                T x77 = x40 * (-x71 - x72) + x55 * x75 + x70 * x76;
                T x78 = 2 * x8;
                T x79 = -2 * x12;
                T x80 = x78 + x79;
                T x81 = (2.0 / 3.0) * f[4] * f[6] - 2.0 / 3.0 * x8;
                T x82 = 2 * f[2];
                T x83 = x18 * x82 + x67 * x81;
                T x84 = (4.0 / 3.0) * f[4] * f[6] - 4.0 / 3.0 * x8;
                T x85 = f[5] * x46;
                T x86 = f[8] * x51;
                T x87 = 2 * f[2] * x31 - f[5] * x73 - f[8] * x74 - x22 * x82;
                T x88 = x40 * (-x85 - x86) + x55 * x87 + x76 * x84;
                T x89 = f[1] * f[8];
                T x90 = 2 * x89;
                T x91 = f[2] * f[7];
                T x92 = -2 * x91;
                T x93 = -x90 - x92;
                T x94 = (2.0 / 3.0) * x89 - 2.0 / 3.0 * x91;
                T x95 = x18 * x46 + x67 * x94;
                T x96 = (4.0 / 3.0) * x89 - 4.0 / 3.0 * x91;
                T x97 = 2 * x43;
                T x98 = 2 * x44;
                T x99 = 2 * f[3] * x31 - x26 * x46 - x41 * x45 - x51 * x59;
                T x100 = x40 * (-x97 - x98) + x55 * x99 + x76 * x96;
                T x101 = f[1] * f[5];
                T x102 = 2 * x101;
                T x103 = f[2] * f[4];
                T x104 = -2 * x103;
                T x105 = x102 + x104;
                T x106 = (2.0 / 3.0) * f[2] * f[4] - 2.0 / 3.0 * x101;
                T x107 = x106 * x67 + x18 * x51;
                T x108 = (4.0 / 3.0) * f[2] * f[4] - 4.0 / 3.0 * x101;
                T x109 = 2 * x48;
                T x110 = 2 * x49;
                T x111 = 2 * f[6] * x31 - x30 * x51 - x41 * x50 - x46 * x59;
                T x112 = x108 * x76 + x111 * x55 + x40 * (-x109 - x110);
                T x113 = f[0] * f[8];
                T x114 = 2 * x113;
                T x115 = f[2] * f[6];
                T x116 = -2 * x115;
                T x117 = x114 + x116;
                T x118 = K * (f[0] * f[4] * f[8] + f[1] * f[5] * f[6] + f[2] * f[3] * f[7] - x11 - x13 - x9 - 1);
                T x119 = f[8] * x118;
                T x120 = (2.0 / 3.0) * f[2] * f[6] - 2.0 / 3.0 * x113;
                T x121 = 2 * f[4];
                T x122 = f[8] * x16;
                T x123 = (2.0 / 3.0) * x31;
                T x124 = x122 * x123;
                T x125 = x120 * x67 + x121 * x18 - x124;
                T x126 = (4.0 / 3.0) * f[2] * f[6] - 4.0 / 3.0 * x113;
                T x127 = f[0] * f[4];
                T x128 = f[1] * f[3];
                T x129 = -2 * x128;
                T x130 = 2 * x59;
                T x131 = 2 * f[4] * x31 - f[7] * x130 - x121 * x26 - x45 * x68;
                T x132 = (4.0 / 3.0) * x53 * x60;
                T x133 = f[8] * x132;
                T x134 = x126 * x76 + x131 * x55 - x133 + x40 * (4 * x127 + x129);
                T x135 = 2 * x127;
                T x136 = x129 + x135;
                T x137 = f[4] * x118;
                T x138 = (2.0 / 3.0) * f[1] * f[3] - 2.0 / 3.0 * x127;
                T x139 = 2 * f[8];
                T x140 = x123 * x16;
                T x141 = f[4] * x140;
                T x142 = x138 * x67 + x139 * x18 - x141;
                T x143 = (4.0 / 3.0) * f[1] * f[3] - 4.0 / 3.0 * x127;
                T x144 = -f[2] * x74 - f[5] * x130 + 2 * f[8] * x31 - x139 * x30;
                T x145 = f[4] * x132;
                T x146 = x143 * x76 + x144 * x55 - x145 + x40 * (4 * x113 + x116);
                T x147 = f[0] * f[7];
                T x148 = 2 * x147;
                T x149 = f[1] * f[6];
                T x150 = -2 * x149;
                T x151 = -x148 - x150;
                T x152 = f[7] * x118;
                T x153 = -x152;
                T x154 = (2.0 / 3.0) * x147 - 2.0 / 3.0 * x149;
                T x155 = 2 * f[5];
                T x156 = f[7] * x140;
                T x157 = x154 * x67 + x155 * x18 + x156;
                T x158 = (4.0 / 3.0) * x147 - 4.0 / 3.0 * x149;
                T x159 = f[0] * f[5];
                T x160 = f[2] * f[3];
                T x161 = -2 * x160;
                T x162 = -f[2] * x73 + 2 * f[5] * x31 - f[8] * x130 - x155 * x26;
                T x163 = f[7] * x132;
                T x164 = x158 * x76 + x162 * x55 + x163 + x40 * (4 * x159 + x161);
                T x165 = 2 * x159;
                T x166 = -x161 - x165;
                T x167 = f[5] * x118;
                T x168 = -x167;
                T x169 = (2.0 / 3.0) * x159 - 2.0 / 3.0 * x160;
                T x170 = 2 * f[7];
                T x171 = f[5] * x140;
                T x172 = x169 * x67 + x170 * x18 + x171;
                T x173 = (4.0 / 3.0) * x159 - 4.0 / 3.0 * x160;
                T x174 = 2 * f[7] * x31 - x121 * x59 - x170 * x30 - x50 * x68;
                T x175 = f[5] * x132;
                T x176 = x173 * x76 + x174 * x55 + x175 + x40 * (4 * x147 + x150);
                T x177 = x5 * (f[5] * f[6] - x10);
                T x178 = x16 * x66;
                T x179 = x32 * ((5.0 / 3.0) * x10 - 5.0 / 3.0 * x7);
                T x180 = 2 * x23;
                T x181 = 2 * x27;
                T x182 = x180 + x181;
                T x183 = x53 * x75;
                T x184 = x61 * ((7.0 / 3.0) * x10 - 7.0 / 3.0 * x7);
                T x185 = x16 * x68;
                T x186 = x178 * x82 + x185 * x81;
                T x187 = f[5] * x121;
                T x188 = f[8] * x170;
                T x189 = x53 * x70;
                T x190 = x183 * x84 + x189 * x87 + x40 * (-x187 - x188);
                T x191 = x120 * x185 + x121 * x178;
                T x192 = 2 * x42;
                T x193 = x126 * x183 + x131 * x189 + x40 * (-x192 - x98);
                T x194 = x169 * x185 + x170 * x178;
                T x195 = 2 * x47;
                T x196 = x173 * x183 + x174 * x189 + x40 * (-x110 - x195);
                T x197 = f[6] * x118;
                T x198 = f[6] * x140;
                T x199 = x154 * x185 + x155 * x178 - x198;
                T x200 = f[6] * x132;
                T x201 = x158 * x183 + x162 * x189 - x200 + x40 * (4 * x101 + x104);
                T x202 = x106 * x185 - x171 + x178 * x51;
                T x203 = x108 * x183 + x111 * x189 - x175 + x40 * (4 * f[1] * f[6] - x148);
                T x204 = -x119;
                T x205 = x124 + x178 * x46 + x185 * x94;
                T x206 = x133 + x183 * x96 + x189 * x99 + x40 * (4 * f[1] * f[3] - x135);
                T x207 = f[3] * x118;
                T x208 = -x207;
                T x209 = f[3] * x140;
                T x210 = x138 * x185 + x139 * x178 + x209;
                T x211 = f[3] * x132;
                T x212 = x143 * x183 + x144 * x189 + x211 + x40 * (4 * x89 + x92);
                T x213 = x5 * (-x12 + x8);
                T x214 = x16 * x81;
                T x215 = x32 * ((5.0 / 3.0) * f[4] * f[6] - 5.0 / 3.0 * x8);
                T x216 = x53 * x87;
                T x217 = x61 * ((7.0 / 3.0) * f[4] * f[6] - 7.0 / 3.0 * x8);
                T x218 = x16 * x82;
                T x219 = x154 * x218 + x155 * x214;
                T x220 = x53 * x84;
                T x221 = x158 * x216 + x162 * x220 + x40 * (-x192 - x97);
                T x222 = x138 * x218 + x139 * x214;
                T x223 = x143 * x216 + x144 * x220 + x40 * (-x109 - x195);
                T x224 = -x156 + x214 * x46 + x218 * x94;
                T x225 = -x163 + x216 * x96 + x220 * x99 + x40 * (4 * f[2] * f[3] - x165);
                T x226 = x169 * x218 + x170 * x214 - x209;
                T x227 = x173 * x216 + x174 * x220 - x211 + x40 * (4 * f[2] * f[7] - x90);
                T x228 = -x197;
                T x229 = x120 * x218 + x121 * x214 + x198;
                T x230 = x126 * x216 + x131 * x220 + x200 + x40 * (4 * f[2] * f[4] - x102);
                T x231 = -x137;
                T x232 = x106 * x218 + x141 + x214 * x51;
                T x233 = x108 * x216 + x111 * x220 + x145 + x40 * (4 * f[2] * f[6] - x114);
                T x234 = x5 * (f[2] * f[7] - x89);
                T x235 = x16 * x94;
                T x236 = x32 * ((5.0 / 3.0) * x89 - 5.0 / 3.0 * x91);
                T x237 = 2 * x21;
                T x238 = x237 + x35;
                T x239 = 2 * x20;
                T x240 = x239 + x38;
                T x241 = x53 * x99;
                T x242 = x61 * ((7.0 / 3.0) * x89 - 7.0 / 3.0 * x91);
                T x243 = x16 * x46;
                T x244 = x120 * x243 + x121 * x235;
                T x245 = f[1] * x41;
                T x246 = x53 * x96;
                T x247 = x126 * x241 + x131 * x246 + x40 * (-x245 - x72);
                T x248 = x154 * x243 + x155 * x235;
                T x249 = f[2] * x41;
                T x250 = x158 * x241 + x162 * x246 + x40 * (-x249 - x86);
                T x251 = x106 * x243 + x235 * x51;
                T x252 = 2 * x57;
                T x253 = 2 * x58;
                T x254 = x108 * x241 + x111 * x246 + x40 * (-x252 - x253);
                T x255 = f[2] * x118;
                T x256 = f[2] * x140;
                T x257 = x169 * x243 + x170 * x235 - x256;
                T x258 = f[2] * x132;
                T x259 = x173 * x241 + x174 * x246 - x258 + x40 * (x79 + 4 * x8);
                T x260 = f[1] * x118;
                T x261 = -x260;
                T x262 = f[1] * x140;
                T x263 = x138 * x243 + x139 * x235 + x262;
                T x264 = f[1] * x132;
                T x265 = x143 * x241 + x144 * x246 + x264 + x40 * (4 * x10 + x64);
                T x266 = x5 * (x113 - x115);
                T x267 = x120 * x16;
                T x268 = x32 * ((5.0 / 3.0) * f[2] * f[6] - 5.0 / 3.0 * x113);
                T x269 = 2 * x19;
                T x270 = x181 + x269;
                T x271 = x126 * x53;
                T x272 = x61 * ((7.0 / 3.0) * f[2] * f[6] - 7.0 / 3.0 * x113);
                T x273 = x121 * x16;
                T x274 = x154 * x273 + x155 * x267;
                T x275 = f[2] * x68;
                T x276 = x131 * x53;
                T x277 = x158 * x276 + x162 * x271 + x40 * (-x188 - x275);
                T x278 = x169 * x273 + x170 * x267;
                T x279 = 2 * x56;
                T x280 = x173 * x276 + x174 * x271 + x40 * (-x253 - x279);
                T x281 = f[0] * x118;
                T x282 = f[0] * x140;
                T x283 = x138 * x273 + x139 * x267 - x282;
                T x284 = f[0] * x132;
                T x285 = x143 * x276 + x144 * x271 - x284 + x40 * (4 * x0 + x3);
                T x286 = -x255;
                T x287 = x106 * x273 + x256 + x267 * x51;
                T x288 = x108 * x276 + x111 * x271 + x258 + x40 * (4 * f[4] * f[6] - x78);
                T x289 = x5 * (f[1] * f[6] - x147);
                T x290 = x154 * x16;
                T x291 = x32 * ((5.0 / 3.0) * x147 - 5.0 / 3.0 * x149);
                T x292 = x162 * x53;
                T x293 = x61 * ((7.0 / 3.0) * x147 - 7.0 / 3.0 * x149);
                T x294 = x155 * x16;
                T x295 = x138 * x294 + x139 * x290;
                T x296 = x158 * x53;
                T x297 = x143 * x292 + x144 * x296 + x40 * (-x252 - x279);
                T x298 = x106 * x294 - x262 + x290 * x51;
                T x299 = x108 * x292 + x111 * x296 - x264 + x40 * (4 * f[5] * f[6] - x63);
                T x300 = -x281;
                T x301 = x169 * x294 + x170 * x290 + x282;
                T x302 = x173 * x292 + x174 * x296 + x284 + x40 * (4 * f[5] * f[7] - x1);
                T x303 = x5 * (x101 - x103);
                T x304 = x106 * x16;
                T x305 = x32 * ((5.0 / 3.0) * f[2] * f[4] - 5.0 / 3.0 * x101);
                T x306 = x237 + x34;
                T x307 = x239 + x37;
                T x308 = x108 * x53;
                T x309 = x61 * ((7.0 / 3.0) * f[2] * f[4] - 7.0 / 3.0 * x101);
                T x310 = x16 * x51;
                T x311 = x169 * x310 + x170 * x304;
                T x312 = x111 * x53;
                T x313 = x173 * x312 + x174 * x308 + x40 * (-x245 - x71);
                T x314 = x138 * x310 + x139 * x304;
                T x315 = x143 * x312 + x144 * x308 + x40 * (-x249 - x85);
                T x316 = x5 * (f[2] * f[3] - x159);
                T x317 = x16 * x169;
                T x318 = x32 * ((5.0 / 3.0) * x159 - 5.0 / 3.0 * x160);
                T x319 = x180 + x269;
                T x320 = x174 * x53;
                T x321 = x61 * ((7.0 / 3.0) * x159 - 7.0 / 3.0 * x160);
                T x322 = x138 * x16 * x170 + x139 * x317;
                T x323 = x144 * x53;
                T x324 = x143 * x320 + x173 * x323 + x40 * (-x187 - x275);
                T x325 = x5 * (x127 - x128);
                T x326 = x32 * ((5.0 / 3.0) * f[1] * f[3] - 5.0 / 3.0 * x127);
                T x327 = x61 * ((7.0 / 3.0) * f[1] * f[3] - 7.0 / 3.0 * x127);
                res[0] +=
                    dx *
                    (grad_test[0] *
                         (disp_grad[0] * (C1 * (4 * f[0] * x18 + x15 + x17 * x33) +
                                          C2 * (x40 * (x36 + x39) + 2 * x52 * x55 + x54 * x62) + x4 * x6) +
                          disp_grad[1] * (C1 * (x33 * x66 + x69) + C2 * (x62 * x70 + x77) + x6 * x65) +
                          disp_grad[2] * (C1 * (x33 * x81 + x83) + C2 * (x62 * x84 + x88) + x6 * x80) +
                          disp_grad[3] * (C1 * (x33 * x94 + x95) + C2 * (x100 + x62 * x96) + x6 * x93) +
                          disp_grad[4] * (C1 * (x120 * x33 + x125) + C2 * (x126 * x62 + x134) + x117 * x6 + x119) +
                          disp_grad[5] * (C1 * (x154 * x33 + x157) + C2 * (x158 * x62 + x164) + x151 * x6 + x153) +
                          disp_grad[6] * (C1 * (x106 * x33 + x107) + C2 * (x108 * x62 + x112) + x105 * x6) +
                          disp_grad[7] * (C1 * (x169 * x33 + x172) + C2 * (x173 * x62 + x176) + x166 * x6 + x168) +
                          disp_grad[8] * (C1 * (x138 * x33 + x142) + C2 * (x143 * x62 + x146) + x136 * x6 + x137)) +
                     grad_test[1] *
                         (disp_grad[0] * (C1 * (x17 * x179 + x69) + C2 * (x184 * x54 + x77) + x177 * x4) +
                          disp_grad[1] * (C1 * (4 * f[1] * x178 + x15 + x179 * x66) +
                                          C2 * (2 * x183 * x70 + x184 * x70 + x40 * (x182 + x36)) + x177 * x65) +
                          disp_grad[2] * (C1 * (x179 * x81 + x186) + C2 * (x184 * x84 + x190) + x177 * x80) +
                          disp_grad[3] * (C1 * (x179 * x94 + x205) + C2 * (x184 * x96 + x206) + x177 * x93 + x204) +
                          disp_grad[4] * (C1 * (x120 * x179 + x191) + C2 * (x126 * x184 + x193) + x117 * x177) +
                          disp_grad[5] * (C1 * (x154 * x179 + x199) + C2 * (x158 * x184 + x201) + x151 * x177 + x197) +
                          disp_grad[6] * (C1 * (x106 * x179 + x202) + C2 * (x108 * x184 + x203) + x105 * x177 + x167) +
                          disp_grad[7] * (C1 * (x169 * x179 + x194) + C2 * (x173 * x184 + x196) + x166 * x177) +
                          disp_grad[8] * (C1 * (x138 * x179 + x210) + C2 * (x143 * x184 + x212) + x136 * x177 + x208)) +
                     grad_test[2] *
                         (disp_grad[0] * (C1 * (x17 * x215 + x83) + C2 * (x217 * x54 + x88) + x213 * x4) +
                          disp_grad[1] * (C1 * (x186 + x215 * x66) + C2 * (x190 + x217 * x70) + x213 * x65) +
                          disp_grad[2] * (C1 * (4 * f[2] * x214 + x15 + x215 * x81) +
                                          C2 * (2 * x216 * x84 + x217 * x84 + x40 * (x182 + x39)) + x213 * x80) +
                          disp_grad[3] * (C1 * (x215 * x94 + x224) + C2 * (x217 * x96 + x225) + x152 + x213 * x93) +
                          disp_grad[4] * (C1 * (x120 * x215 + x229) + C2 * (x126 * x217 + x230) + x117 * x213 + x228) +
                          disp_grad[5] * (C1 * (x154 * x215 + x219) + C2 * (x158 * x217 + x221) + x151 * x213) +
                          disp_grad[6] * (C1 * (x106 * x215 + x232) + C2 * (x108 * x217 + x233) + x105 * x213 + x231) +
                          disp_grad[7] * (C1 * (x169 * x215 + x226) + C2 * (x173 * x217 + x227) + x166 * x213 + x207) +
                          disp_grad[8] * (C1 * (x138 * x215 + x222) + C2 * (x143 * x217 + x223) + x136 * x213)));
                res[1] +=
                    dx *
                    (grad_test[0] *
                         (disp_grad[0] * (C1 * (x17 * x236 + x95) + C2 * (x100 + x242 * x54) + x234 * x4) +
                          disp_grad[1] * (C1 * (x205 + x236 * x66) + C2 * (x206 + x242 * x70) + x204 + x234 * x65) +
                          disp_grad[2] * (C1 * (x224 + x236 * x81) + C2 * (x225 + x242 * x84) + x152 + x234 * x80) +
                          disp_grad[3] * (C1 * (4 * f[3] * x235 + x15 + x236 * x94) +
                                          C2 * (2 * x241 * x96 + x242 * x96 + x40 * (x238 + x240)) + x234 * x93) +
                          disp_grad[4] * (C1 * (x120 * x236 + x244) + C2 * (x126 * x242 + x247) + x117 * x234) +
                          disp_grad[5] * (C1 * (x154 * x236 + x248) + C2 * (x158 * x242 + x250) + x151 * x234) +
                          disp_grad[6] * (C1 * (x106 * x236 + x251) + C2 * (x108 * x242 + x254) + x105 * x234) +
                          disp_grad[7] * (C1 * (x169 * x236 + x257) + C2 * (x173 * x242 + x259) + x166 * x234 + x255) +
                          disp_grad[8] * (C1 * (x138 * x236 + x263) + C2 * (x143 * x242 + x265) + x136 * x234 + x261)) +
                     grad_test[1] *
                         (disp_grad[0] * (C1 * (x125 + x17 * x268) + C2 * (x134 + x272 * x54) + x119 + x266 * x4) +
                          disp_grad[1] * (C1 * (x191 + x268 * x66) + C2 * (x193 + x272 * x70) + x266 * x65) +
                          disp_grad[2] * (C1 * (x229 + x268 * x81) + C2 * (x230 + x272 * x84) + x228 + x266 * x80) +
                          disp_grad[3] * (C1 * (x244 + x268 * x94) + C2 * (x247 + x272 * x96) + x266 * x93) +
                          disp_grad[4] * (C1 * (4 * f[4] * x267 + x120 * x268 + x15) +
                                          C2 * (x126 * x272 + 2 * x131 * x271 + x40 * (x238 + x270)) + x117 * x266) +
                          disp_grad[5] * (C1 * (x154 * x268 + x274) + C2 * (x158 * x272 + x277) + x151 * x266) +
                          disp_grad[6] * (C1 * (x106 * x268 + x287) + C2 * (x108 * x272 + x288) + x105 * x266 + x286) +
                          disp_grad[7] * (C1 * (x169 * x268 + x278) + C2 * (x173 * x272 + x280) + x166 * x266) +
                          disp_grad[8] * (C1 * (x138 * x268 + x283) + C2 * (x143 * x272 + x285) + x136 * x266 + x281)) +
                     grad_test[2] *
                         (disp_grad[0] * (C1 * (x157 + x17 * x291) + C2 * (x164 + x293 * x54) + x153 + x289 * x4) +
                          disp_grad[1] * (C1 * (x199 + x291 * x66) + C2 * (x201 + x293 * x70) + x197 + x289 * x65) +
                          disp_grad[2] * (C1 * (x219 + x291 * x81) + C2 * (x221 + x293 * x84) + x289 * x80) +
                          disp_grad[3] * (C1 * (x248 + x291 * x94) + C2 * (x250 + x293 * x96) + x289 * x93) +
                          disp_grad[4] * (C1 * (x120 * x291 + x274) + C2 * (x126 * x293 + x277) + x117 * x289) +
                          disp_grad[5] * (C1 * (4 * f[5] * x290 + x15 + x154 * x291) +
                                          C2 * (2 * x158 * x292 + x158 * x293 + x40 * (x240 + x270)) + x151 * x289) +
                          disp_grad[6] * (C1 * (x106 * x291 + x298) + C2 * (x108 * x293 + x299) + x105 * x289 + x260) +
                          disp_grad[7] * (C1 * (x169 * x291 + x301) + C2 * (x173 * x293 + x302) + x166 * x289 + x300) +
                          disp_grad[8] * (C1 * (x138 * x291 + x295) + C2 * (x143 * x293 + x297) + x136 * x289)));
                res[2] +=
                    dx *
                    (grad_test[0] *
                         (disp_grad[0] * (C1 * (x107 + x17 * x305) + C2 * (x112 + x309 * x54) + x303 * x4) +
                          disp_grad[1] * (C1 * (x202 + x305 * x66) + C2 * (x203 + x309 * x70) + x167 + x303 * x65) +
                          disp_grad[2] * (C1 * (x232 + x305 * x81) + C2 * (x233 + x309 * x84) + x231 + x303 * x80) +
                          disp_grad[3] * (C1 * (x251 + x305 * x94) + C2 * (x254 + x309 * x96) + x303 * x93) +
                          disp_grad[4] * (C1 * (x120 * x305 + x287) + C2 * (x126 * x309 + x288) + x117 * x303 + x286) +
                          disp_grad[5] * (C1 * (x154 * x305 + x298) + C2 * (x158 * x309 + x299) + x151 * x303 + x260) +
                          disp_grad[6] * (C1 * (4 * f[6] * x304 + x106 * x305 + x15) +
                                          C2 * (x108 * x309 + 2 * x111 * x308 + x40 * (x306 + x307)) + x105 * x303) +
                          disp_grad[7] * (C1 * (x169 * x305 + x311) + C2 * (x173 * x309 + x313) + x166 * x303) +
                          disp_grad[8] * (C1 * (x138 * x305 + x314) + C2 * (x143 * x309 + x315) + x136 * x303)) +
                     grad_test[1] *
                         (disp_grad[0] * (C1 * (x17 * x318 + x172) + C2 * (x176 + x321 * x54) + x168 + x316 * x4) +
                          disp_grad[1] * (C1 * (x194 + x318 * x66) + C2 * (x196 + x321 * x70) + x316 * x65) +
                          disp_grad[2] * (C1 * (x226 + x318 * x81) + C2 * (x227 + x321 * x84) + x207 + x316 * x80) +
                          disp_grad[3] * (C1 * (x257 + x318 * x94) + C2 * (x259 + x321 * x96) + x255 + x316 * x93) +
                          disp_grad[4] * (C1 * (x120 * x318 + x278) + C2 * (x126 * x321 + x280) + x117 * x316) +
                          disp_grad[5] * (C1 * (x154 * x318 + x301) + C2 * (x158 * x321 + x302) + x151 * x316 + x300) +
                          disp_grad[6] * (C1 * (x106 * x318 + x311) + C2 * (x108 * x321 + x313) + x105 * x316) +
                          disp_grad[7] * (C1 * (4 * f[7] * x317 + x15 + x169 * x318) +
                                          C2 * (2 * x173 * x320 + x173 * x321 + x40 * (x306 + x319)) + x166 * x316) +
                          disp_grad[8] * (C1 * (x138 * x318 + x322) + C2 * (x143 * x321 + x324) + x136 * x316)) +
                     grad_test[2] *
                         (disp_grad[0] * (C1 * (x142 + x17 * x326) + C2 * (x146 + x327 * x54) + x137 + x325 * x4) +
                          disp_grad[1] * (C1 * (x210 + x326 * x66) + C2 * (x212 + x327 * x70) + x208 + x325 * x65) +
                          disp_grad[2] * (C1 * (x222 + x326 * x81) + C2 * (x223 + x327 * x84) + x325 * x80) +
                          disp_grad[3] * (C1 * (x263 + x326 * x94) + C2 * (x265 + x327 * x96) + x261 + x325 * x93) +
                          disp_grad[4] * (C1 * (x120 * x326 + x283) + C2 * (x126 * x327 + x285) + x117 * x325 + x281) +
                          disp_grad[5] * (C1 * (x154 * x326 + x295) + C2 * (x158 * x327 + x297) + x151 * x325) +
                          disp_grad[6] * (C1 * (x106 * x326 + x314) + C2 * (x108 * x327 + x315) + x105 * x325) +
                          disp_grad[7] * (C1 * (x169 * x326 + x322) + C2 * (x173 * x327 + x324) + x166 * x325) +
                          disp_grad[8] * (C1 * (4 * x122 * x138 + x138 * x326 + x15) +
                                          C2 * (2 * x143 * x323 + x143 * x327 + x40 * (x307 + x319)) + x136 * x325)));
            }

            T C1{0.083};
            T C2{0.083};
            T K{166.67};
        };
    }  // namespace kernels
}  // namespace utopia

#endif  // UTOPIA_TPL_HYPERELASTICITY_IncompressibleMooneyRivlin_3_IMPL_hpp
