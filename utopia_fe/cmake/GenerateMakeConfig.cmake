# GenerateMakeConfig.cmake

function(list_to_makefile_def output_string pre_list post_list item_prefix
         list_of_strings)

    list(REMOVE_DUPLICATES list_of_strings)

    set(tempstr ${${output_string}} ${pre_list})

    foreach(list_el ${list_of_strings})
        string(REGEX MATCH "(.*)framework" is_frame_work "${list_el}")

        if(is_frame_work)
            get_filename_component(FRAMEWORK_NAME "${list_el}" NAME)
            string(REGEX REPLACE "/${FRAMEWORK_NAME}" "" FRAMEWORK_PATH
                                 "${list_el}")
            string(REGEX REPLACE ".framework" "" FRAMEWORK_NAME
                                 "${FRAMEWORK_NAME}")

            set(tempstr
                "${tempstr}-F${FRAMEWORK_PATH} -framework ${FRAMEWORK_NAME} ")
        else()
            string(REGEX MATCH "LINK_ONLY" is_gen_expr "${list_el}")
            string(REGEX MATCH ";" is_trash "${list_el}")

            if(is_gen_expr OR is_trash)
                # message("${list_el}")
            else()
                set(tempstr "${tempstr}${item_prefix}${list_el} ")
            endif()
        endif()

    endforeach(list_el)

    set(tempstr "${tempstr} ${post_list}")

    set(${output_string}
        ${tempstr}
        PARENT_SCOPE)

endfunction()

function(generate_make_config prefix target)
    string(TOUPPER ${prefix} var_prefix)
    string(TOLOWER ${prefix} file_prefix)

    if(NOT TARGET ${target})
        message(STATUS "target=${target} does not exists")
        return()
    endif()

    # message(STATUS "target=${target}")

    # ##########################################################################

    get_target_property(INTERFACE_INCLUDE_DIRECTORIES ${target}
                        "INTERFACE_INCLUDE_DIRECTORIES")

    get_target_property(INTERFACE_LINK_LIBRARIES ${target}
                        "INTERFACE_LINK_LIBRARIES")

    get_target_property(LOCATION ${target} "LOCATION")

    # get_target_property(COMPILE_FLAGS ${target} "COMPILE_FLAGS")
    # message("COMPILE_FLAGS=${COMPILE_FLAGS}")

    # get_target_property(INTERFACE_COMPILE_OPTIONS ${target}
    #                     "INTERFACE_COMPILE_OPTIONS")
    # message("INTERFACE_COMPILE_OPTIONS=${INTERFACE_COMPILE_OPTIONS}")

    # ##########################################################################

    set(header_str
        "#Automatically generated by CMake with generate_make_config for target ${target}\n\n"
    )

    list_to_makefile_def(include_str "\n${var_prefix}_INCLUDES=" "\n" "-I"
                         "${INTERFACE_INCLUDE_DIRECTORIES}")

    list_to_makefile_def(link_str "\n${var_prefix}_LIBRARIES=${LOCATION} " "\n"
                         "" "${INTERFACE_LINK_LIBRARIES}")

    set(config_content
        "${header_str}UTOPIA_FE_C_COMPILER=${CMAKE_C_COMPILER}\n\nUTOPIA_FE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n${include_str} ${link_str}"
    )

    # ##########################################################################

    set(filename "${CMAKE_BINARY_DIR}/${file_prefix}-config.makefile")

    file(WRITE ${filename} "${config_content}")

    install(FILES "${CMAKE_BINARY_DIR}/${file_prefix}-config.makefile"
            DESTINATION config)

endfunction()
